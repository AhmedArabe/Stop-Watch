
stop_watch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002cb0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004e  00800060  00002cb0  00002d44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  008000ae  008000ae  00002d92  2**0
                  ALLOC
  3 .stab         00002c7c  00000000  00000000  00002d94  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001809  00000000  00000000  00005a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007219  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007359  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000074c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009112  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ffd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000adac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000af0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b199  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b967  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 b4 0a 	jmp	0x1568	; 0x1568 <__vector_6>
      1c:	0c 94 4e 0a 	jmp	0x149c	; 0x149c <__vector_7>
      20:	0c 94 81 0a 	jmp	0x1502	; 0x1502 <__vector_8>
      24:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_9>
      28:	0c 94 3f 07 	jmp	0xe7e	; 0xe7e <__vector_10>
      2c:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 eb       	ldi	r30, 0xB0	; 176
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3a       	cpi	r26, 0xAE	; 174
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ea       	ldi	r26, 0xAE	; 174
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3b       	cpi	r26, 0xBE	; 190
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 13 14 	call	0x2826	; 0x2826 <main>
      8a:	0c 94 56 16 	jmp	0x2cac	; 0x2cac <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ad e8       	ldi	r26, 0x8D	; 141
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 1f 16 	jmp	0x2c3e	; 0x2c3e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8d e8       	ldi	r24, 0x8D	; 141
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 3b 16 	jmp	0x2c76	; 0x2c76 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 2b 16 	jmp	0x2c56	; 0x2c56 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 47 16 	jmp	0x2c8e	; 0x2c8e <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 2f 16 	jmp	0x2c5e	; 0x2c5e <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 4b 16 	jmp	0x2c96	; 0x2c96 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <TIMER0_Init>:
static void (*Timer1_OCB_Fptr) (void)=NULL;
static void (*Timer1_ICU_Fptr) (void)=NULL;
/******************************************************************************************/
/*timer 0 functions*/
void TIMER0_Init(Timer0Mode_type mode,Timer0Scaler_type scaler)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <TIMER0_Init+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <TIMER0_Init+0x8>
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode)
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	28 2f       	mov	r18, r24
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	3c 83       	std	Y+4, r19	; 0x04
     b5e:	2b 83       	std	Y+3, r18	; 0x03
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	9c 81       	ldd	r25, Y+4	; 0x04
     b64:	81 30       	cpi	r24, 0x01	; 1
     b66:	91 05       	cpc	r25, r1
     b68:	21 f1       	breq	.+72     	; 0xbb2 <TIMER0_Init+0x6c>
     b6a:	2b 81       	ldd	r18, Y+3	; 0x03
     b6c:	3c 81       	ldd	r19, Y+4	; 0x04
     b6e:	22 30       	cpi	r18, 0x02	; 2
     b70:	31 05       	cpc	r19, r1
     b72:	2c f4       	brge	.+10     	; 0xb7e <TIMER0_Init+0x38>
     b74:	8b 81       	ldd	r24, Y+3	; 0x03
     b76:	9c 81       	ldd	r25, Y+4	; 0x04
     b78:	00 97       	sbiw	r24, 0x00	; 0
     b7a:	61 f0       	breq	.+24     	; 0xb94 <TIMER0_Init+0x4e>
     b7c:	54 c0       	rjmp	.+168    	; 0xc26 <TIMER0_Init+0xe0>
     b7e:	2b 81       	ldd	r18, Y+3	; 0x03
     b80:	3c 81       	ldd	r19, Y+4	; 0x04
     b82:	22 30       	cpi	r18, 0x02	; 2
     b84:	31 05       	cpc	r19, r1
     b86:	21 f1       	breq	.+72     	; 0xbd0 <TIMER0_Init+0x8a>
     b88:	8b 81       	ldd	r24, Y+3	; 0x03
     b8a:	9c 81       	ldd	r25, Y+4	; 0x04
     b8c:	83 30       	cpi	r24, 0x03	; 3
     b8e:	91 05       	cpc	r25, r1
     b90:	71 f1       	breq	.+92     	; 0xbee <TIMER0_Init+0xa8>
     b92:	49 c0       	rjmp	.+146    	; 0xc26 <TIMER0_Init+0xe0>
	{
	case TIMER0_NORMAL_MODE:
		CLR_BIT(TCCR0_REG,TCCR0_WGM00);
     b94:	a3 e5       	ldi	r26, 0x53	; 83
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e3 e5       	ldi	r30, 0x53	; 83
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	8f 7b       	andi	r24, 0xBF	; 191
     ba0:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_WGM01);
     ba2:	a3 e5       	ldi	r26, 0x53	; 83
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e3 e5       	ldi	r30, 0x53	; 83
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	87 7f       	andi	r24, 0xF7	; 247
     bae:	8c 93       	st	X, r24
     bb0:	3a c0       	rjmp	.+116    	; 0xc26 <TIMER0_Init+0xe0>
		break;
	case TIMER0_PHASECORRECT_MODE:
		SET_BIT(TCCR0_REG,TCCR0_WGM00);
     bb2:	a3 e5       	ldi	r26, 0x53	; 83
     bb4:	b0 e0       	ldi	r27, 0x00	; 0
     bb6:	e3 e5       	ldi	r30, 0x53	; 83
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	80 81       	ld	r24, Z
     bbc:	80 64       	ori	r24, 0x40	; 64
     bbe:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_WGM01);
     bc0:	a3 e5       	ldi	r26, 0x53	; 83
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	e3 e5       	ldi	r30, 0x53	; 83
     bc6:	f0 e0       	ldi	r31, 0x00	; 0
     bc8:	80 81       	ld	r24, Z
     bca:	87 7f       	andi	r24, 0xF7	; 247
     bcc:	8c 93       	st	X, r24
     bce:	2b c0       	rjmp	.+86     	; 0xc26 <TIMER0_Init+0xe0>
		break;
	case TIMER0_CTC_MODE:
		CLR_BIT(TCCR0_REG,TCCR0_WGM00);
     bd0:	a3 e5       	ldi	r26, 0x53	; 83
     bd2:	b0 e0       	ldi	r27, 0x00	; 0
     bd4:	e3 e5       	ldi	r30, 0x53	; 83
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	80 81       	ld	r24, Z
     bda:	8f 7b       	andi	r24, 0xBF	; 191
     bdc:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_WGM01);
     bde:	a3 e5       	ldi	r26, 0x53	; 83
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e3 e5       	ldi	r30, 0x53	; 83
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	88 60       	ori	r24, 0x08	; 8
     bea:	8c 93       	st	X, r24
     bec:	1c c0       	rjmp	.+56     	; 0xc26 <TIMER0_Init+0xe0>
		break;
	case TIMER0_FASTPWM_MODE:
		SET_BIT(TCCR0_REG,TCCR0_WGM00);
     bee:	a3 e5       	ldi	r26, 0x53	; 83
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e3 e5       	ldi	r30, 0x53	; 83
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	80 64       	ori	r24, 0x40	; 64
     bfa:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_WGM01);
     bfc:	a3 e5       	ldi	r26, 0x53	; 83
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e3 e5       	ldi	r30, 0x53	; 83
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	88 60       	ori	r24, 0x08	; 8
     c08:	8c 93       	st	X, r24
		/*###############################################*/
		// Set On Top Clear On Compare
		SET_BIT(TCCR0_REG, TCCR0_COM01);
     c0a:	a3 e5       	ldi	r26, 0x53	; 83
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e3 e5       	ldi	r30, 0x53	; 83
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	80 62       	ori	r24, 0x20	; 32
     c16:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG, TCCR0_COM00);
     c18:	a3 e5       	ldi	r26, 0x53	; 83
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e3 e5       	ldi	r30, 0x53	; 83
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8f 7e       	andi	r24, 0xEF	; 239
     c24:	8c 93       	st	X, r24
		/*###############################################*/

		break;
	}
	TCCR0_REG&=0XF8;//0b11111000
     c26:	a3 e5       	ldi	r26, 0x53	; 83
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e3 e5       	ldi	r30, 0x53	; 83
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	88 7f       	andi	r24, 0xF8	; 248
     c32:	8c 93       	st	X, r24
	TCCR0_REG|=scaler;
     c34:	a3 e5       	ldi	r26, 0x53	; 83
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	e3 e5       	ldi	r30, 0x53	; 83
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	90 81       	ld	r25, Z
     c3e:	8a 81       	ldd	r24, Y+2	; 0x02
     c40:	89 2b       	or	r24, r25
     c42:	8c 93       	st	X, r24
}
     c44:	0f 90       	pop	r0
     c46:	0f 90       	pop	r0
     c48:	0f 90       	pop	r0
     c4a:	0f 90       	pop	r0
     c4c:	cf 91       	pop	r28
     c4e:	df 91       	pop	r29
     c50:	08 95       	ret

00000c52 <TIMER0_OC0Mode>:

void TIMER0_OC0Mode(OC0Mode_type mode)
{
     c52:	df 93       	push	r29
     c54:	cf 93       	push	r28
     c56:	00 d0       	rcall	.+0      	; 0xc58 <TIMER0_OC0Mode+0x6>
     c58:	0f 92       	push	r0
     c5a:	cd b7       	in	r28, 0x3d	; 61
     c5c:	de b7       	in	r29, 0x3e	; 62
     c5e:	89 83       	std	Y+1, r24	; 0x01
	switch (mode)
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	28 2f       	mov	r18, r24
     c64:	30 e0       	ldi	r19, 0x00	; 0
     c66:	3b 83       	std	Y+3, r19	; 0x03
     c68:	2a 83       	std	Y+2, r18	; 0x02
     c6a:	8a 81       	ldd	r24, Y+2	; 0x02
     c6c:	9b 81       	ldd	r25, Y+3	; 0x03
     c6e:	81 30       	cpi	r24, 0x01	; 1
     c70:	91 05       	cpc	r25, r1
     c72:	21 f1       	breq	.+72     	; 0xcbc <TIMER0_OC0Mode+0x6a>
     c74:	2a 81       	ldd	r18, Y+2	; 0x02
     c76:	3b 81       	ldd	r19, Y+3	; 0x03
     c78:	22 30       	cpi	r18, 0x02	; 2
     c7a:	31 05       	cpc	r19, r1
     c7c:	2c f4       	brge	.+10     	; 0xc88 <TIMER0_OC0Mode+0x36>
     c7e:	8a 81       	ldd	r24, Y+2	; 0x02
     c80:	9b 81       	ldd	r25, Y+3	; 0x03
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	61 f0       	breq	.+24     	; 0xc9e <TIMER0_OC0Mode+0x4c>
     c86:	46 c0       	rjmp	.+140    	; 0xd14 <TIMER0_OC0Mode+0xc2>
     c88:	2a 81       	ldd	r18, Y+2	; 0x02
     c8a:	3b 81       	ldd	r19, Y+3	; 0x03
     c8c:	22 30       	cpi	r18, 0x02	; 2
     c8e:	31 05       	cpc	r19, r1
     c90:	21 f1       	breq	.+72     	; 0xcda <TIMER0_OC0Mode+0x88>
     c92:	8a 81       	ldd	r24, Y+2	; 0x02
     c94:	9b 81       	ldd	r25, Y+3	; 0x03
     c96:	83 30       	cpi	r24, 0x03	; 3
     c98:	91 05       	cpc	r25, r1
     c9a:	71 f1       	breq	.+92     	; 0xcf8 <TIMER0_OC0Mode+0xa6>
     c9c:	3b c0       	rjmp	.+118    	; 0xd14 <TIMER0_OC0Mode+0xc2>
	{
	case OC0_DISCONNECTED:
		CLR_BIT(TCCR0_REG,TCCR0_COM00);
     c9e:	a3 e5       	ldi	r26, 0x53	; 83
     ca0:	b0 e0       	ldi	r27, 0x00	; 0
     ca2:	e3 e5       	ldi	r30, 0x53	; 83
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	80 81       	ld	r24, Z
     ca8:	8f 7e       	andi	r24, 0xEF	; 239
     caa:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_COM01);
     cac:	a3 e5       	ldi	r26, 0x53	; 83
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e3 e5       	ldi	r30, 0x53	; 83
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	8f 7d       	andi	r24, 0xDF	; 223
     cb8:	8c 93       	st	X, r24
     cba:	2c c0       	rjmp	.+88     	; 0xd14 <TIMER0_OC0Mode+0xc2>
		break;
	case OC0_TOGGLE:
		SET_BIT(TCCR0_REG,TCCR0_COM00);
     cbc:	a3 e5       	ldi	r26, 0x53	; 83
     cbe:	b0 e0       	ldi	r27, 0x00	; 0
     cc0:	e3 e5       	ldi	r30, 0x53	; 83
     cc2:	f0 e0       	ldi	r31, 0x00	; 0
     cc4:	80 81       	ld	r24, Z
     cc6:	80 61       	ori	r24, 0x10	; 16
     cc8:	8c 93       	st	X, r24
		CLR_BIT(TCCR0_REG,TCCR0_COM01);
     cca:	a3 e5       	ldi	r26, 0x53	; 83
     ccc:	b0 e0       	ldi	r27, 0x00	; 0
     cce:	e3 e5       	ldi	r30, 0x53	; 83
     cd0:	f0 e0       	ldi	r31, 0x00	; 0
     cd2:	80 81       	ld	r24, Z
     cd4:	8f 7d       	andi	r24, 0xDF	; 223
     cd6:	8c 93       	st	X, r24
     cd8:	1d c0       	rjmp	.+58     	; 0xd14 <TIMER0_OC0Mode+0xc2>
		break;
	case OC0_NON_INVERTING:
		CLR_BIT(TCCR0_REG,TCCR0_COM00);
     cda:	a3 e5       	ldi	r26, 0x53	; 83
     cdc:	b0 e0       	ldi	r27, 0x00	; 0
     cde:	e3 e5       	ldi	r30, 0x53	; 83
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	80 81       	ld	r24, Z
     ce4:	8f 7e       	andi	r24, 0xEF	; 239
     ce6:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_COM01);
     ce8:	a3 e5       	ldi	r26, 0x53	; 83
     cea:	b0 e0       	ldi	r27, 0x00	; 0
     cec:	e3 e5       	ldi	r30, 0x53	; 83
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	80 81       	ld	r24, Z
     cf2:	80 62       	ori	r24, 0x20	; 32
     cf4:	8c 93       	st	X, r24
     cf6:	0e c0       	rjmp	.+28     	; 0xd14 <TIMER0_OC0Mode+0xc2>
		break;
	case OC0_INVERTING:
		SET_BIT(TCCR0_REG,TCCR0_COM00);
     cf8:	a3 e5       	ldi	r26, 0x53	; 83
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	e3 e5       	ldi	r30, 0x53	; 83
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	80 61       	ori	r24, 0x10	; 16
     d04:	8c 93       	st	X, r24
		SET_BIT(TCCR0_REG,TCCR0_COM01);
     d06:	a3 e5       	ldi	r26, 0x53	; 83
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	e3 e5       	ldi	r30, 0x53	; 83
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	80 62       	ori	r24, 0x20	; 32
     d12:	8c 93       	st	X, r24
		break;
	}
}
     d14:	0f 90       	pop	r0
     d16:	0f 90       	pop	r0
     d18:	0f 90       	pop	r0
     d1a:	cf 91       	pop	r28
     d1c:	df 91       	pop	r29
     d1e:	08 95       	ret

00000d20 <TIMER0_OV_InterruptEnable>:

void TIMER0_OV_InterruptEnable(void)
{
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_TOIE0);
     d28:	a9 e5       	ldi	r26, 0x59	; 89
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e9 e5       	ldi	r30, 0x59	; 89
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	81 60       	ori	r24, 0x01	; 1
     d34:	8c 93       	st	X, r24
}
     d36:	cf 91       	pop	r28
     d38:	df 91       	pop	r29
     d3a:	08 95       	ret

00000d3c <TIMER0_OV_InterruptDisable>:
void TIMER0_OV_InterruptDisable(void)
{
     d3c:	df 93       	push	r29
     d3e:	cf 93       	push	r28
     d40:	cd b7       	in	r28, 0x3d	; 61
     d42:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_TOIE0);
     d44:	a9 e5       	ldi	r26, 0x59	; 89
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	e9 e5       	ldi	r30, 0x59	; 89
     d4a:	f0 e0       	ldi	r31, 0x00	; 0
     d4c:	80 81       	ld	r24, Z
     d4e:	8e 7f       	andi	r24, 0xFE	; 254
     d50:	8c 93       	st	X, r24
}
     d52:	cf 91       	pop	r28
     d54:	df 91       	pop	r29
     d56:	08 95       	ret

00000d58 <TIMER0_OC_InterruptEnable>:
void TIMER0_OC_InterruptEnable(void)
{
     d58:	df 93       	push	r29
     d5a:	cf 93       	push	r28
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_OCIE0);
     d60:	a9 e5       	ldi	r26, 0x59	; 89
     d62:	b0 e0       	ldi	r27, 0x00	; 0
     d64:	e9 e5       	ldi	r30, 0x59	; 89
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	80 81       	ld	r24, Z
     d6a:	82 60       	ori	r24, 0x02	; 2
     d6c:	8c 93       	st	X, r24
}
     d6e:	cf 91       	pop	r28
     d70:	df 91       	pop	r29
     d72:	08 95       	ret

00000d74 <TIMER0_OC_InterruptDisable>:
void TIMER0_OC_InterruptDisable(void)
{
     d74:	df 93       	push	r29
     d76:	cf 93       	push	r28
     d78:	cd b7       	in	r28, 0x3d	; 61
     d7a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_OCIE0);
     d7c:	a9 e5       	ldi	r26, 0x59	; 89
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e9 e5       	ldi	r30, 0x59	; 89
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8d 7f       	andi	r24, 0xFD	; 253
     d88:	8c 93       	st	X, r24
}
     d8a:	cf 91       	pop	r28
     d8c:	df 91       	pop	r29
     d8e:	08 95       	ret

00000d90 <TIMER0_Read_TCNT>:
/*********************READ TCNT***************************************/
u8 TIMER0_Read_TCNT(void)
{
     d90:	df 93       	push	r29
     d92:	cf 93       	push	r28
     d94:	cd b7       	in	r28, 0x3d	; 61
     d96:	de b7       	in	r29, 0x3e	; 62
	return TCNT0_REG;
     d98:	e2 e5       	ldi	r30, 0x52	; 82
     d9a:	f0 e0       	ldi	r31, 0x00	; 0
     d9c:	80 81       	ld	r24, Z
}
     d9e:	cf 91       	pop	r28
     da0:	df 91       	pop	r29
     da2:	08 95       	ret

00000da4 <TIMER0_CTC_SetOCR0>:


/*********************SET OCR0 Value*********************************/
void TIMER0_CTC_SetOCR0(u8 Local_u8OCRValue)
{
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	0f 92       	push	r0
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	89 83       	std	Y+1, r24	; 0x01
	if(Local_u8OCRValue <=255)
	{

		OCR0_REG = Local_u8OCRValue;
     db0:	ec e5       	ldi	r30, 0x5C	; 92
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	89 81       	ldd	r24, Y+1	; 0x01
     db6:	80 83       	st	Z, r24
	}
}
     db8:	0f 90       	pop	r0
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <Timer0_OVF_SetCallBack>:



/***************************Timer0 callback*************************/
void Timer0_OVF_SetCallBack(void(*LocalFptr)(void))
{
     dc0:	df 93       	push	r29
     dc2:	cf 93       	push	r28
     dc4:	00 d0       	rcall	.+0      	; 0xdc6 <Timer0_OVF_SetCallBack+0x6>
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
	if(LocalFptr != NULL)
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	00 97       	sbiw	r24, 0x00	; 0
     dd4:	31 f0       	breq	.+12     	; 0xde2 <Timer0_OVF_SetCallBack+0x22>
	{
		Timer0_OVF_Fptr = LocalFptr;
     dd6:	89 81       	ldd	r24, Y+1	; 0x01
     dd8:	9a 81       	ldd	r25, Y+2	; 0x02
     dda:	90 93 af 00 	sts	0x00AF, r25
     dde:	80 93 ae 00 	sts	0x00AE, r24
	}
}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	08 95       	ret

00000dec <Timer0_CTC_SetCallBack>:



void Timer0_CTC_SetCallBack(void(*LocalFptr)(void))
{
     dec:	df 93       	push	r29
     dee:	cf 93       	push	r28
     df0:	00 d0       	rcall	.+0      	; 0xdf2 <Timer0_CTC_SetCallBack+0x6>
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	9a 83       	std	Y+2, r25	; 0x02
     df8:	89 83       	std	Y+1, r24	; 0x01
	if(LocalFptr != NULL)
     dfa:	89 81       	ldd	r24, Y+1	; 0x01
     dfc:	9a 81       	ldd	r25, Y+2	; 0x02
     dfe:	00 97       	sbiw	r24, 0x00	; 0
     e00:	31 f0       	breq	.+12     	; 0xe0e <Timer0_CTC_SetCallBack+0x22>
	{
		Timer0_CTC_Fptr = LocalFptr;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	90 93 b1 00 	sts	0x00B1, r25
     e0a:	80 93 b0 00 	sts	0x00B0, r24
	}
}
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <__vector_11>:

/*********************************Timer 0 ISR functions*********************************************/
ISR(TIMER0_OVF_vect)
{
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	2f 93       	push	r18
     e24:	3f 93       	push	r19
     e26:	4f 93       	push	r20
     e28:	5f 93       	push	r21
     e2a:	6f 93       	push	r22
     e2c:	7f 93       	push	r23
     e2e:	8f 93       	push	r24
     e30:	9f 93       	push	r25
     e32:	af 93       	push	r26
     e34:	bf 93       	push	r27
     e36:	ef 93       	push	r30
     e38:	ff 93       	push	r31
     e3a:	df 93       	push	r29
     e3c:	cf 93       	push	r28
     e3e:	cd b7       	in	r28, 0x3d	; 61
     e40:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_OVF_Fptr != NULL)
     e42:	80 91 ae 00 	lds	r24, 0x00AE
     e46:	90 91 af 00 	lds	r25, 0x00AF
     e4a:	00 97       	sbiw	r24, 0x00	; 0
     e4c:	29 f0       	breq	.+10     	; 0xe58 <__vector_11+0x40>
	{
		Timer0_OVF_Fptr();
     e4e:	e0 91 ae 00 	lds	r30, 0x00AE
     e52:	f0 91 af 00 	lds	r31, 0x00AF
     e56:	09 95       	icall
	}
}
     e58:	cf 91       	pop	r28
     e5a:	df 91       	pop	r29
     e5c:	ff 91       	pop	r31
     e5e:	ef 91       	pop	r30
     e60:	bf 91       	pop	r27
     e62:	af 91       	pop	r26
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	7f 91       	pop	r23
     e6a:	6f 91       	pop	r22
     e6c:	5f 91       	pop	r21
     e6e:	4f 91       	pop	r20
     e70:	3f 91       	pop	r19
     e72:	2f 91       	pop	r18
     e74:	0f 90       	pop	r0
     e76:	0f be       	out	0x3f, r0	; 63
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__vector_10>:

ISR(TIMER0_OC_vect)
{
     e7e:	1f 92       	push	r1
     e80:	0f 92       	push	r0
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	0f 92       	push	r0
     e86:	11 24       	eor	r1, r1
     e88:	2f 93       	push	r18
     e8a:	3f 93       	push	r19
     e8c:	4f 93       	push	r20
     e8e:	5f 93       	push	r21
     e90:	6f 93       	push	r22
     e92:	7f 93       	push	r23
     e94:	8f 93       	push	r24
     e96:	9f 93       	push	r25
     e98:	af 93       	push	r26
     e9a:	bf 93       	push	r27
     e9c:	ef 93       	push	r30
     e9e:	ff 93       	push	r31
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	cd b7       	in	r28, 0x3d	; 61
     ea6:	de b7       	in	r29, 0x3e	; 62
	if(Timer0_CTC_Fptr != NULL)
     ea8:	80 91 b0 00 	lds	r24, 0x00B0
     eac:	90 91 b1 00 	lds	r25, 0x00B1
     eb0:	00 97       	sbiw	r24, 0x00	; 0
     eb2:	29 f0       	breq	.+10     	; 0xebe <__vector_10+0x40>
	{
		Timer0_CTC_Fptr();
     eb4:	e0 91 b0 00 	lds	r30, 0x00B0
     eb8:	f0 91 b1 00 	lds	r31, 0x00B1
     ebc:	09 95       	icall
	}
}
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	ff 91       	pop	r31
     ec4:	ef 91       	pop	r30
     ec6:	bf 91       	pop	r27
     ec8:	af 91       	pop	r26
     eca:	9f 91       	pop	r25
     ecc:	8f 91       	pop	r24
     ece:	7f 91       	pop	r23
     ed0:	6f 91       	pop	r22
     ed2:	5f 91       	pop	r21
     ed4:	4f 91       	pop	r20
     ed6:	3f 91       	pop	r19
     ed8:	2f 91       	pop	r18
     eda:	0f 90       	pop	r0
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	0f 90       	pop	r0
     ee0:	1f 90       	pop	r1
     ee2:	18 95       	reti

00000ee4 <Timer1_Init>:


/***********************************************************************/
/*timer 1 functions*/
void Timer1_Init( Timer1Mode_type mode,Timer1Scaler_type scaler)
{
     ee4:	df 93       	push	r29
     ee6:	cf 93       	push	r28
     ee8:	00 d0       	rcall	.+0      	; 0xeea <Timer1_Init+0x6>
     eea:	00 d0       	rcall	.+0      	; 0xeec <Timer1_Init+0x8>
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	6a 83       	std	Y+2, r22	; 0x02
	switch (mode)
     ef4:	89 81       	ldd	r24, Y+1	; 0x01
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	3c 83       	std	Y+4, r19	; 0x04
     efc:	2b 83       	std	Y+3, r18	; 0x03
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	82 30       	cpi	r24, 0x02	; 2
     f04:	91 05       	cpc	r25, r1
     f06:	09 f4       	brne	.+2      	; 0xf0a <Timer1_Init+0x26>
     f08:	56 c0       	rjmp	.+172    	; 0xfb6 <Timer1_Init+0xd2>
     f0a:	2b 81       	ldd	r18, Y+3	; 0x03
     f0c:	3c 81       	ldd	r19, Y+4	; 0x04
     f0e:	23 30       	cpi	r18, 0x03	; 3
     f10:	31 05       	cpc	r19, r1
     f12:	54 f4       	brge	.+20     	; 0xf28 <Timer1_Init+0x44>
     f14:	8b 81       	ldd	r24, Y+3	; 0x03
     f16:	9c 81       	ldd	r25, Y+4	; 0x04
     f18:	00 97       	sbiw	r24, 0x00	; 0
     f1a:	99 f0       	breq	.+38     	; 0xf42 <Timer1_Init+0x5e>
     f1c:	2b 81       	ldd	r18, Y+3	; 0x03
     f1e:	3c 81       	ldd	r19, Y+4	; 0x04
     f20:	21 30       	cpi	r18, 0x01	; 1
     f22:	31 05       	cpc	r19, r1
     f24:	59 f1       	breq	.+86     	; 0xf7c <Timer1_Init+0x98>
     f26:	9d c0       	rjmp	.+314    	; 0x1062 <Timer1_Init+0x17e>
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <Timer1_Init+0x50>
     f32:	5e c0       	rjmp	.+188    	; 0xff0 <Timer1_Init+0x10c>
     f34:	2b 81       	ldd	r18, Y+3	; 0x03
     f36:	3c 81       	ldd	r19, Y+4	; 0x04
     f38:	24 30       	cpi	r18, 0x04	; 4
     f3a:	31 05       	cpc	r19, r1
     f3c:	09 f4       	brne	.+2      	; 0xf40 <Timer1_Init+0x5c>
     f3e:	75 c0       	rjmp	.+234    	; 0x102a <Timer1_Init+0x146>
     f40:	90 c0       	rjmp	.+288    	; 0x1062 <Timer1_Init+0x17e>
	{
	case TIMER1_NORMAL_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     f42:	af e4       	ldi	r26, 0x4F	; 79
     f44:	b0 e0       	ldi	r27, 0x00	; 0
     f46:	ef e4       	ldi	r30, 0x4F	; 79
     f48:	f0 e0       	ldi	r31, 0x00	; 0
     f4a:	80 81       	ld	r24, Z
     f4c:	8e 7f       	andi	r24, 0xFE	; 254
     f4e:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
     f50:	af e4       	ldi	r26, 0x4F	; 79
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	ef e4       	ldi	r30, 0x4F	; 79
     f56:	f0 e0       	ldi	r31, 0x00	; 0
     f58:	80 81       	ld	r24, Z
     f5a:	8d 7f       	andi	r24, 0xFD	; 253
     f5c:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,TCCR1B_WGM12);
     f5e:	ae e4       	ldi	r26, 0x4E	; 78
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	ee e4       	ldi	r30, 0x4E	; 78
     f64:	f0 e0       	ldi	r31, 0x00	; 0
     f66:	80 81       	ld	r24, Z
     f68:	87 7f       	andi	r24, 0xF7	; 247
     f6a:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,TCCR1B_WGM13);
     f6c:	ae e4       	ldi	r26, 0x4E	; 78
     f6e:	b0 e0       	ldi	r27, 0x00	; 0
     f70:	ee e4       	ldi	r30, 0x4E	; 78
     f72:	f0 e0       	ldi	r31, 0x00	; 0
     f74:	80 81       	ld	r24, Z
     f76:	8f 7e       	andi	r24, 0xEF	; 239
     f78:	8c 93       	st	X, r24
     f7a:	73 c0       	rjmp	.+230    	; 0x1062 <Timer1_Init+0x17e>
		break;
	case TIMER1_CTC_ICR_TOP_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     f7c:	af e4       	ldi	r26, 0x4F	; 79
     f7e:	b0 e0       	ldi	r27, 0x00	; 0
     f80:	ef e4       	ldi	r30, 0x4F	; 79
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	80 81       	ld	r24, Z
     f86:	8e 7f       	andi	r24, 0xFE	; 254
     f88:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
     f8a:	af e4       	ldi	r26, 0x4F	; 79
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	ef e4       	ldi	r30, 0x4F	; 79
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	8d 7f       	andi	r24, 0xFD	; 253
     f96:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
     f98:	ae e4       	ldi	r26, 0x4E	; 78
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	ee e4       	ldi	r30, 0x4E	; 78
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	88 60       	ori	r24, 0x08	; 8
     fa4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
     fa6:	ae e4       	ldi	r26, 0x4E	; 78
     fa8:	b0 e0       	ldi	r27, 0x00	; 0
     faa:	ee e4       	ldi	r30, 0x4E	; 78
     fac:	f0 e0       	ldi	r31, 0x00	; 0
     fae:	80 81       	ld	r24, Z
     fb0:	80 61       	ori	r24, 0x10	; 16
     fb2:	8c 93       	st	X, r24
     fb4:	56 c0       	rjmp	.+172    	; 0x1062 <Timer1_Init+0x17e>
		break;

	case TIMER1_CTC_OCRA_TOP_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     fb6:	af e4       	ldi	r26, 0x4F	; 79
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	ef e4       	ldi	r30, 0x4F	; 79
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	8e 7f       	andi	r24, 0xFE	; 254
     fc2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM11);
     fc4:	af e4       	ldi	r26, 0x4F	; 79
     fc6:	b0 e0       	ldi	r27, 0x00	; 0
     fc8:	ef e4       	ldi	r30, 0x4F	; 79
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	8d 7f       	andi	r24, 0xFD	; 253
     fd0:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
     fd2:	ae e4       	ldi	r26, 0x4E	; 78
     fd4:	b0 e0       	ldi	r27, 0x00	; 0
     fd6:	ee e4       	ldi	r30, 0x4E	; 78
     fd8:	f0 e0       	ldi	r31, 0x00	; 0
     fda:	80 81       	ld	r24, Z
     fdc:	88 60       	ori	r24, 0x08	; 8
     fde:	8c 93       	st	X, r24
		CLR_BIT(TCCR1B_REG,TCCR1B_WGM13);
     fe0:	ae e4       	ldi	r26, 0x4E	; 78
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	ee e4       	ldi	r30, 0x4E	; 78
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	8f 7e       	andi	r24, 0xEF	; 239
     fec:	8c 93       	st	X, r24
     fee:	39 c0       	rjmp	.+114    	; 0x1062 <Timer1_Init+0x17e>
		break;

	case TIMER1_FASTPWM_ICR_TOP_MODE:
		CLR_BIT(TCCR1A_REG,TCCR1A_WGM10);
     ff0:	af e4       	ldi	r26, 0x4F	; 79
     ff2:	b0 e0       	ldi	r27, 0x00	; 0
     ff4:	ef e4       	ldi	r30, 0x4F	; 79
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	8e 7f       	andi	r24, 0xFE	; 254
     ffc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
     ffe:	af e4       	ldi	r26, 0x4F	; 79
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	ef e4       	ldi	r30, 0x4F	; 79
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	82 60       	ori	r24, 0x02	; 2
    100a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
    100c:	ae e4       	ldi	r26, 0x4E	; 78
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	ee e4       	ldi	r30, 0x4E	; 78
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	88 60       	ori	r24, 0x08	; 8
    1018:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    101a:	ae e4       	ldi	r26, 0x4E	; 78
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	ee e4       	ldi	r30, 0x4E	; 78
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	80 61       	ori	r24, 0x10	; 16
    1026:	8c 93       	st	X, r24
    1028:	1c c0       	rjmp	.+56     	; 0x1062 <Timer1_Init+0x17e>
		break;

	case TIMER1_FASTPWM_OCRA_TOP_MODE:
		SET_BIT(TCCR1A_REG,TCCR1A_WGM10);
    102a:	af e4       	ldi	r26, 0x4F	; 79
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	ef e4       	ldi	r30, 0x4F	; 79
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	81 60       	ori	r24, 0x01	; 1
    1036:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_WGM11);
    1038:	af e4       	ldi	r26, 0x4F	; 79
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	ef e4       	ldi	r30, 0x4F	; 79
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	82 60       	ori	r24, 0x02	; 2
    1044:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM12);
    1046:	ae e4       	ldi	r26, 0x4E	; 78
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	ee e4       	ldi	r30, 0x4E	; 78
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	88 60       	ori	r24, 0x08	; 8
    1052:	8c 93       	st	X, r24
		SET_BIT(TCCR1B_REG,TCCR1B_WGM13);
    1054:	ae e4       	ldi	r26, 0x4E	; 78
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	ee e4       	ldi	r30, 0x4E	; 78
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	80 81       	ld	r24, Z
    105e:	80 61       	ori	r24, 0x10	; 16
    1060:	8c 93       	st	X, r24
		break;
	}

	TCCR1B_REG&=0XF8;
    1062:	ae e4       	ldi	r26, 0x4E	; 78
    1064:	b0 e0       	ldi	r27, 0x00	; 0
    1066:	ee e4       	ldi	r30, 0x4E	; 78
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	88 7f       	andi	r24, 0xF8	; 248
    106e:	8c 93       	st	X, r24
	TCCR1B_REG|=scaler;
    1070:	ae e4       	ldi	r26, 0x4E	; 78
    1072:	b0 e0       	ldi	r27, 0x00	; 0
    1074:	ee e4       	ldi	r30, 0x4E	; 78
    1076:	f0 e0       	ldi	r31, 0x00	; 0
    1078:	90 81       	ld	r25, Z
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	89 2b       	or	r24, r25
    107e:	8c 93       	st	X, r24

}
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	cf 91       	pop	r28
    108a:	df 91       	pop	r29
    108c:	08 95       	ret

0000108e <Timer1_OCRA1Mode>:
void Timer1_OCRA1Mode(OC1A_Mode_type oc1a_mode)
{
    108e:	df 93       	push	r29
    1090:	cf 93       	push	r28
    1092:	00 d0       	rcall	.+0      	; 0x1094 <Timer1_OCRA1Mode+0x6>
    1094:	0f 92       	push	r0
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1a_mode)
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	3b 83       	std	Y+3, r19	; 0x03
    10a4:	2a 83       	std	Y+2, r18	; 0x02
    10a6:	8a 81       	ldd	r24, Y+2	; 0x02
    10a8:	9b 81       	ldd	r25, Y+3	; 0x03
    10aa:	81 30       	cpi	r24, 0x01	; 1
    10ac:	91 05       	cpc	r25, r1
    10ae:	21 f1       	breq	.+72     	; 0x10f8 <Timer1_OCRA1Mode+0x6a>
    10b0:	2a 81       	ldd	r18, Y+2	; 0x02
    10b2:	3b 81       	ldd	r19, Y+3	; 0x03
    10b4:	22 30       	cpi	r18, 0x02	; 2
    10b6:	31 05       	cpc	r19, r1
    10b8:	2c f4       	brge	.+10     	; 0x10c4 <Timer1_OCRA1Mode+0x36>
    10ba:	8a 81       	ldd	r24, Y+2	; 0x02
    10bc:	9b 81       	ldd	r25, Y+3	; 0x03
    10be:	00 97       	sbiw	r24, 0x00	; 0
    10c0:	61 f0       	breq	.+24     	; 0x10da <Timer1_OCRA1Mode+0x4c>
    10c2:	46 c0       	rjmp	.+140    	; 0x1150 <Timer1_OCRA1Mode+0xc2>
    10c4:	2a 81       	ldd	r18, Y+2	; 0x02
    10c6:	3b 81       	ldd	r19, Y+3	; 0x03
    10c8:	22 30       	cpi	r18, 0x02	; 2
    10ca:	31 05       	cpc	r19, r1
    10cc:	21 f1       	breq	.+72     	; 0x1116 <Timer1_OCRA1Mode+0x88>
    10ce:	8a 81       	ldd	r24, Y+2	; 0x02
    10d0:	9b 81       	ldd	r25, Y+3	; 0x03
    10d2:	83 30       	cpi	r24, 0x03	; 3
    10d4:	91 05       	cpc	r25, r1
    10d6:	71 f1       	breq	.+92     	; 0x1134 <Timer1_OCRA1Mode+0xa6>
    10d8:	3b c0       	rjmp	.+118    	; 0x1150 <Timer1_OCRA1Mode+0xc2>
	{
	case OCRA_DISCONNECTED:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    10da:	af e4       	ldi	r26, 0x4F	; 79
    10dc:	b0 e0       	ldi	r27, 0x00	; 0
    10de:	ef e4       	ldi	r30, 0x4F	; 79
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	80 81       	ld	r24, Z
    10e4:	8f 7b       	andi	r24, 0xBF	; 191
    10e6:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    10e8:	af e4       	ldi	r26, 0x4F	; 79
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	ef e4       	ldi	r30, 0x4F	; 79
    10ee:	f0 e0       	ldi	r31, 0x00	; 0
    10f0:	80 81       	ld	r24, Z
    10f2:	8f 77       	andi	r24, 0x7F	; 127
    10f4:	8c 93       	st	X, r24
    10f6:	2c c0       	rjmp	.+88     	; 0x1150 <Timer1_OCRA1Mode+0xc2>
		break;
	case OCRA_TOGGLE:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    10f8:	af e4       	ldi	r26, 0x4F	; 79
    10fa:	b0 e0       	ldi	r27, 0x00	; 0
    10fc:	ef e4       	ldi	r30, 0x4F	; 79
    10fe:	f0 e0       	ldi	r31, 0x00	; 0
    1100:	80 81       	ld	r24, Z
    1102:	80 64       	ori	r24, 0x40	; 64
    1104:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    1106:	af e4       	ldi	r26, 0x4F	; 79
    1108:	b0 e0       	ldi	r27, 0x00	; 0
    110a:	ef e4       	ldi	r30, 0x4F	; 79
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	8f 77       	andi	r24, 0x7F	; 127
    1112:	8c 93       	st	X, r24
    1114:	1d c0       	rjmp	.+58     	; 0x1150 <Timer1_OCRA1Mode+0xc2>
		break;
	case OCRA_NON_INVERTING:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    1116:	af e4       	ldi	r26, 0x4F	; 79
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	ef e4       	ldi	r30, 0x4F	; 79
    111c:	f0 e0       	ldi	r31, 0x00	; 0
    111e:	80 81       	ld	r24, Z
    1120:	8f 7b       	andi	r24, 0xBF	; 191
    1122:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    1124:	af e4       	ldi	r26, 0x4F	; 79
    1126:	b0 e0       	ldi	r27, 0x00	; 0
    1128:	ef e4       	ldi	r30, 0x4F	; 79
    112a:	f0 e0       	ldi	r31, 0x00	; 0
    112c:	80 81       	ld	r24, Z
    112e:	80 68       	ori	r24, 0x80	; 128
    1130:	8c 93       	st	X, r24
    1132:	0e c0       	rjmp	.+28     	; 0x1150 <Timer1_OCRA1Mode+0xc2>
		break;
	case OCRA_INVERTING:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A0);
    1134:	af e4       	ldi	r26, 0x4F	; 79
    1136:	b0 e0       	ldi	r27, 0x00	; 0
    1138:	ef e4       	ldi	r30, 0x4F	; 79
    113a:	f0 e0       	ldi	r31, 0x00	; 0
    113c:	80 81       	ld	r24, Z
    113e:	80 64       	ori	r24, 0x40	; 64
    1140:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1A1);
    1142:	af e4       	ldi	r26, 0x4F	; 79
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ef e4       	ldi	r30, 0x4F	; 79
    1148:	f0 e0       	ldi	r31, 0x00	; 0
    114a:	80 81       	ld	r24, Z
    114c:	80 68       	ori	r24, 0x80	; 128
    114e:	8c 93       	st	X, r24
		break;
	}
}
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <Timer1_OCRB1Mode>:
void Timer1_OCRB1Mode(OC1B_Mode_type oc1b_mode)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	00 d0       	rcall	.+0      	; 0x1162 <Timer1_OCRB1Mode+0x6>
    1162:	0f 92       	push	r0
    1164:	cd b7       	in	r28, 0x3d	; 61
    1166:	de b7       	in	r29, 0x3e	; 62
    1168:	89 83       	std	Y+1, r24	; 0x01
	switch (oc1b_mode)
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	28 2f       	mov	r18, r24
    116e:	30 e0       	ldi	r19, 0x00	; 0
    1170:	3b 83       	std	Y+3, r19	; 0x03
    1172:	2a 83       	std	Y+2, r18	; 0x02
    1174:	8a 81       	ldd	r24, Y+2	; 0x02
    1176:	9b 81       	ldd	r25, Y+3	; 0x03
    1178:	81 30       	cpi	r24, 0x01	; 1
    117a:	91 05       	cpc	r25, r1
    117c:	21 f1       	breq	.+72     	; 0x11c6 <Timer1_OCRB1Mode+0x6a>
    117e:	2a 81       	ldd	r18, Y+2	; 0x02
    1180:	3b 81       	ldd	r19, Y+3	; 0x03
    1182:	22 30       	cpi	r18, 0x02	; 2
    1184:	31 05       	cpc	r19, r1
    1186:	2c f4       	brge	.+10     	; 0x1192 <Timer1_OCRB1Mode+0x36>
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	9b 81       	ldd	r25, Y+3	; 0x03
    118c:	00 97       	sbiw	r24, 0x00	; 0
    118e:	61 f0       	breq	.+24     	; 0x11a8 <Timer1_OCRB1Mode+0x4c>
    1190:	46 c0       	rjmp	.+140    	; 0x121e <Timer1_OCRB1Mode+0xc2>
    1192:	2a 81       	ldd	r18, Y+2	; 0x02
    1194:	3b 81       	ldd	r19, Y+3	; 0x03
    1196:	22 30       	cpi	r18, 0x02	; 2
    1198:	31 05       	cpc	r19, r1
    119a:	21 f1       	breq	.+72     	; 0x11e4 <Timer1_OCRB1Mode+0x88>
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	9b 81       	ldd	r25, Y+3	; 0x03
    11a0:	83 30       	cpi	r24, 0x03	; 3
    11a2:	91 05       	cpc	r25, r1
    11a4:	71 f1       	breq	.+92     	; 0x1202 <Timer1_OCRB1Mode+0xa6>
    11a6:	3b c0       	rjmp	.+118    	; 0x121e <Timer1_OCRB1Mode+0xc2>
	{
	case OCRB_DISCONNECTED:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    11a8:	af e4       	ldi	r26, 0x4F	; 79
    11aa:	b0 e0       	ldi	r27, 0x00	; 0
    11ac:	ef e4       	ldi	r30, 0x4F	; 79
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	8f 7e       	andi	r24, 0xEF	; 239
    11b4:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    11b6:	af e4       	ldi	r26, 0x4F	; 79
    11b8:	b0 e0       	ldi	r27, 0x00	; 0
    11ba:	ef e4       	ldi	r30, 0x4F	; 79
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	80 81       	ld	r24, Z
    11c0:	8f 7d       	andi	r24, 0xDF	; 223
    11c2:	8c 93       	st	X, r24
    11c4:	2c c0       	rjmp	.+88     	; 0x121e <Timer1_OCRB1Mode+0xc2>
		break;
	case OCRB_TOGGLE:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    11c6:	af e4       	ldi	r26, 0x4F	; 79
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	ef e4       	ldi	r30, 0x4F	; 79
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	80 61       	ori	r24, 0x10	; 16
    11d2:	8c 93       	st	X, r24
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    11d4:	af e4       	ldi	r26, 0x4F	; 79
    11d6:	b0 e0       	ldi	r27, 0x00	; 0
    11d8:	ef e4       	ldi	r30, 0x4F	; 79
    11da:	f0 e0       	ldi	r31, 0x00	; 0
    11dc:	80 81       	ld	r24, Z
    11de:	8f 7d       	andi	r24, 0xDF	; 223
    11e0:	8c 93       	st	X, r24
    11e2:	1d c0       	rjmp	.+58     	; 0x121e <Timer1_OCRB1Mode+0xc2>
		break;
	case OCRB_NON_INVERTING:
		CLR_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    11e4:	af e4       	ldi	r26, 0x4F	; 79
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ef e4       	ldi	r30, 0x4F	; 79
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	8f 7e       	andi	r24, 0xEF	; 239
    11f0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    11f2:	af e4       	ldi	r26, 0x4F	; 79
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	ef e4       	ldi	r30, 0x4F	; 79
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	80 81       	ld	r24, Z
    11fc:	80 62       	ori	r24, 0x20	; 32
    11fe:	8c 93       	st	X, r24
    1200:	0e c0       	rjmp	.+28     	; 0x121e <Timer1_OCRB1Mode+0xc2>
		break;
	case OCRB_INVERTING:
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B0);
    1202:	af e4       	ldi	r26, 0x4F	; 79
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	ef e4       	ldi	r30, 0x4F	; 79
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	80 61       	ori	r24, 0x10	; 16
    120e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A_REG,TCCR1A_COM1B1);
    1210:	af e4       	ldi	r26, 0x4F	; 79
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e4       	ldi	r30, 0x4F	; 79
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 62       	ori	r24, 0x20	; 32
    121c:	8c 93       	st	X, r24
		break;
	}
}
    121e:	0f 90       	pop	r0
    1220:	0f 90       	pop	r0
    1222:	0f 90       	pop	r0
    1224:	cf 91       	pop	r28
    1226:	df 91       	pop	r29
    1228:	08 95       	ret

0000122a <Timer1_InputCaptureEdge>:
void Timer1_InputCaptureEdge(ICU_Edge_type edge)
{
    122a:	df 93       	push	r29
    122c:	cf 93       	push	r28
    122e:	0f 92       	push	r0
    1230:	cd b7       	in	r28, 0x3d	; 61
    1232:	de b7       	in	r29, 0x3e	; 62
    1234:	89 83       	std	Y+1, r24	; 0x01
	if(edge==RISING)
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	88 23       	and	r24, r24
    123a:	41 f4       	brne	.+16     	; 0x124c <Timer1_InputCaptureEdge+0x22>
		SET_BIT(TCCR1B_REG,TCCR1B_ICES1);
    123c:	ae e4       	ldi	r26, 0x4E	; 78
    123e:	b0 e0       	ldi	r27, 0x00	; 0
    1240:	ee e4       	ldi	r30, 0x4E	; 78
    1242:	f0 e0       	ldi	r31, 0x00	; 0
    1244:	80 81       	ld	r24, Z
    1246:	80 64       	ori	r24, 0x40	; 64
    1248:	8c 93       	st	X, r24
    124a:	0a c0       	rjmp	.+20     	; 0x1260 <Timer1_InputCaptureEdge+0x36>

	else if(edge==FALLING)
    124c:	89 81       	ldd	r24, Y+1	; 0x01
    124e:	81 30       	cpi	r24, 0x01	; 1
    1250:	39 f4       	brne	.+14     	; 0x1260 <Timer1_InputCaptureEdge+0x36>
		CLR_BIT(TCCR1B_REG,TCCR1B_ICES1);
    1252:	ae e4       	ldi	r26, 0x4E	; 78
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ee e4       	ldi	r30, 0x4E	; 78
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8f 7b       	andi	r24, 0xBF	; 191
    125e:	8c 93       	st	X, r24
}
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <Timer1_ReadInputCaptureValue>:

u8 Timer1_ReadInputCaptureValue(void)
{
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	return ICR1_REG;
    1270:	e6 e4       	ldi	r30, 0x46	; 70
    1272:	f0 e0       	ldi	r31, 0x00	; 0
    1274:	80 81       	ld	r24, Z
    1276:	91 81       	ldd	r25, Z+1	; 0x01
}
    1278:	cf 91       	pop	r28
    127a:	df 91       	pop	r29
    127c:	08 95       	ret

0000127e <Timer1_ICU_InterruptEnable>:


/****************************Timer 1 Interrupt functions**************************************/

void Timer1_ICU_InterruptEnable(void)
{
    127e:	df 93       	push	r29
    1280:	cf 93       	push	r28
    1282:	cd b7       	in	r28, 0x3d	; 61
    1284:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_TICIE1);
    1286:	a9 e5       	ldi	r26, 0x59	; 89
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e9 e5       	ldi	r30, 0x59	; 89
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	80 62       	ori	r24, 0x20	; 32
    1292:	8c 93       	st	X, r24
}
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <Timer1_ICU_InterruptDisable>:
void Timer1_ICU_InterruptDisable(void)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_TICIE1);
    12a2:	a9 e5       	ldi	r26, 0x59	; 89
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e9 e5       	ldi	r30, 0x59	; 89
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	8f 7d       	andi	r24, 0xDF	; 223
    12ae:	8c 93       	st	X, r24
}
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <Timer1_OVF_InterruptEnable>:
void Timer1_OVF_InterruptEnable(void)
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_TOIE1);
    12be:	a9 e5       	ldi	r26, 0x59	; 89
    12c0:	b0 e0       	ldi	r27, 0x00	; 0
    12c2:	e9 e5       	ldi	r30, 0x59	; 89
    12c4:	f0 e0       	ldi	r31, 0x00	; 0
    12c6:	80 81       	ld	r24, Z
    12c8:	84 60       	ori	r24, 0x04	; 4
    12ca:	8c 93       	st	X, r24
}
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <Timer1_OVF_InterruptDisable>:
void Timer1_OVF_InterruptDisable(void)
{
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_TOIE1);
    12da:	a9 e5       	ldi	r26, 0x59	; 89
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	e9 e5       	ldi	r30, 0x59	; 89
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	8b 7f       	andi	r24, 0xFB	; 251
    12e6:	8c 93       	st	X, r24
}
    12e8:	cf 91       	pop	r28
    12ea:	df 91       	pop	r29
    12ec:	08 95       	ret

000012ee <Timer1_OCA_InterruptEnable>:
void Timer1_OCA_InterruptEnable(void)
{
    12ee:	df 93       	push	r29
    12f0:	cf 93       	push	r28
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_OCIE1A);
    12f6:	a9 e5       	ldi	r26, 0x59	; 89
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	e9 e5       	ldi	r30, 0x59	; 89
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 61       	ori	r24, 0x10	; 16
    1302:	8c 93       	st	X, r24
}
    1304:	cf 91       	pop	r28
    1306:	df 91       	pop	r29
    1308:	08 95       	ret

0000130a <Timer1_OCA_InterruptDisable>:
void Timer1_OCA_InterruptDisable(void)
{
    130a:	df 93       	push	r29
    130c:	cf 93       	push	r28
    130e:	cd b7       	in	r28, 0x3d	; 61
    1310:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_OCIE1A);
    1312:	a9 e5       	ldi	r26, 0x59	; 89
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	e9 e5       	ldi	r30, 0x59	; 89
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	8f 7e       	andi	r24, 0xEF	; 239
    131e:	8c 93       	st	X, r24
}
    1320:	cf 91       	pop	r28
    1322:	df 91       	pop	r29
    1324:	08 95       	ret

00001326 <Timer1_OCB_InterruptEnable>:
void Timer1_OCB_InterruptEnable(void)
{
    1326:	df 93       	push	r29
    1328:	cf 93       	push	r28
    132a:	cd b7       	in	r28, 0x3d	; 61
    132c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK_REG,TIMSK_OCIE1B);
    132e:	a9 e5       	ldi	r26, 0x59	; 89
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e9 e5       	ldi	r30, 0x59	; 89
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	88 60       	ori	r24, 0x08	; 8
    133a:	8c 93       	st	X, r24
}
    133c:	cf 91       	pop	r28
    133e:	df 91       	pop	r29
    1340:	08 95       	ret

00001342 <Timer1_OCB_InterruptDisable>:
void Timer1_OCB_InterruptDisable(void)
{
    1342:	df 93       	push	r29
    1344:	cf 93       	push	r28
    1346:	cd b7       	in	r28, 0x3d	; 61
    1348:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TIMSK_REG,TIMSK_OCIE1B);
    134a:	a9 e5       	ldi	r26, 0x59	; 89
    134c:	b0 e0       	ldi	r27, 0x00	; 0
    134e:	e9 e5       	ldi	r30, 0x59	; 89
    1350:	f0 e0       	ldi	r31, 0x00	; 0
    1352:	80 81       	ld	r24, Z
    1354:	87 7f       	andi	r24, 0xF7	; 247
    1356:	8c 93       	st	X, r24
}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <TIMER1_PreloadOCR1B>:

void TIMER1_PreloadOCR1B(u16 preload_value)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	00 d0       	rcall	.+0      	; 0x1364 <TIMER1_PreloadOCR1B+0x6>
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
	OCR1B_REG = preload_value;
    136c:	e8 e4       	ldi	r30, 0x48	; 72
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	9a 81       	ldd	r25, Y+2	; 0x02
    1374:	91 83       	std	Z+1, r25	; 0x01
    1376:	80 83       	st	Z, r24
}
    1378:	0f 90       	pop	r0
    137a:	0f 90       	pop	r0
    137c:	cf 91       	pop	r28
    137e:	df 91       	pop	r29
    1380:	08 95       	ret

00001382 <TIMER1_PreloadOCR1A>:
void TIMER1_PreloadOCR1A(u16 preload_value)
{
    1382:	df 93       	push	r29
    1384:	cf 93       	push	r28
    1386:	00 d0       	rcall	.+0      	; 0x1388 <TIMER1_PreloadOCR1A+0x6>
    1388:	cd b7       	in	r28, 0x3d	; 61
    138a:	de b7       	in	r29, 0x3e	; 62
    138c:	9a 83       	std	Y+2, r25	; 0x02
    138e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A_REG = preload_value;
    1390:	ea e4       	ldi	r30, 0x4A	; 74
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	89 81       	ldd	r24, Y+1	; 0x01
    1396:	9a 81       	ldd	r25, Y+2	; 0x02
    1398:	91 83       	std	Z+1, r25	; 0x01
    139a:	80 83       	st	Z, r24
}
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	cf 91       	pop	r28
    13a2:	df 91       	pop	r29
    13a4:	08 95       	ret

000013a6 <Timer1_OVF_SetCallBack>:


/*********************************Timer 1 Call Back functions*****************************************/

void Timer1_OVF_SetCallBack(void(*LocalFptr)(void))
{
    13a6:	df 93       	push	r29
    13a8:	cf 93       	push	r28
    13aa:	00 d0       	rcall	.+0      	; 0x13ac <Timer1_OVF_SetCallBack+0x6>
    13ac:	cd b7       	in	r28, 0x3d	; 61
    13ae:	de b7       	in	r29, 0x3e	; 62
    13b0:	9a 83       	std	Y+2, r25	; 0x02
    13b2:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OVF_Fptr=LocalFptr;
    13b4:	89 81       	ldd	r24, Y+1	; 0x01
    13b6:	9a 81       	ldd	r25, Y+2	; 0x02
    13b8:	90 93 b3 00 	sts	0x00B3, r25
    13bc:	80 93 b2 00 	sts	0x00B2, r24
}
    13c0:	0f 90       	pop	r0
    13c2:	0f 90       	pop	r0
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <Timer1_OCA_SetCallBack>:
void Timer1_OCA_SetCallBack(void(*LocalFptr)(void))
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <Timer1_OCA_SetCallBack+0x6>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCA_Fptr=LocalFptr;
    13d8:	89 81       	ldd	r24, Y+1	; 0x01
    13da:	9a 81       	ldd	r25, Y+2	; 0x02
    13dc:	90 93 b5 00 	sts	0x00B5, r25
    13e0:	80 93 b4 00 	sts	0x00B4, r24
}
    13e4:	0f 90       	pop	r0
    13e6:	0f 90       	pop	r0
    13e8:	cf 91       	pop	r28
    13ea:	df 91       	pop	r29
    13ec:	08 95       	ret

000013ee <Timer1_OCB_SetCallBack>:
void Timer1_OCB_SetCallBack(void(*LocalFptr)(void))
{
    13ee:	df 93       	push	r29
    13f0:	cf 93       	push	r28
    13f2:	00 d0       	rcall	.+0      	; 0x13f4 <Timer1_OCB_SetCallBack+0x6>
    13f4:	cd b7       	in	r28, 0x3d	; 61
    13f6:	de b7       	in	r29, 0x3e	; 62
    13f8:	9a 83       	std	Y+2, r25	; 0x02
    13fa:	89 83       	std	Y+1, r24	; 0x01
	Timer1_OCB_Fptr=LocalFptr;
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	90 93 b7 00 	sts	0x00B7, r25
    1404:	80 93 b6 00 	sts	0x00B6, r24
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	cf 91       	pop	r28
    140e:	df 91       	pop	r29
    1410:	08 95       	ret

00001412 <Timer1_ICU_SetCallBack>:
void Timer1_ICU_SetCallBack(void(*LocalFptr)(void))
{
    1412:	df 93       	push	r29
    1414:	cf 93       	push	r28
    1416:	00 d0       	rcall	.+0      	; 0x1418 <Timer1_ICU_SetCallBack+0x6>
    1418:	cd b7       	in	r28, 0x3d	; 61
    141a:	de b7       	in	r29, 0x3e	; 62
    141c:	9a 83       	std	Y+2, r25	; 0x02
    141e:	89 83       	std	Y+1, r24	; 0x01
	Timer1_ICU_Fptr=LocalFptr;
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	9a 81       	ldd	r25, Y+2	; 0x02
    1424:	90 93 b9 00 	sts	0x00B9, r25
    1428:	80 93 b8 00 	sts	0x00B8, r24
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	cf 91       	pop	r28
    1432:	df 91       	pop	r29
    1434:	08 95       	ret

00001436 <__vector_9>:

/*********************************Timer 1 ISR functions*********************************************/
ISR(TIMER1_OVF_vect)
{
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	2f 93       	push	r18
    1442:	3f 93       	push	r19
    1444:	4f 93       	push	r20
    1446:	5f 93       	push	r21
    1448:	6f 93       	push	r22
    144a:	7f 93       	push	r23
    144c:	8f 93       	push	r24
    144e:	9f 93       	push	r25
    1450:	af 93       	push	r26
    1452:	bf 93       	push	r27
    1454:	ef 93       	push	r30
    1456:	ff 93       	push	r31
    1458:	df 93       	push	r29
    145a:	cf 93       	push	r28
    145c:	cd b7       	in	r28, 0x3d	; 61
    145e:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OVF_Fptr!=NULL)
    1460:	80 91 b2 00 	lds	r24, 0x00B2
    1464:	90 91 b3 00 	lds	r25, 0x00B3
    1468:	00 97       	sbiw	r24, 0x00	; 0
    146a:	29 f0       	breq	.+10     	; 0x1476 <__vector_9+0x40>
	{
		Timer1_OVF_Fptr();
    146c:	e0 91 b2 00 	lds	r30, 0x00B2
    1470:	f0 91 b3 00 	lds	r31, 0x00B3
    1474:	09 95       	icall
	}
}
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	ff 91       	pop	r31
    147c:	ef 91       	pop	r30
    147e:	bf 91       	pop	r27
    1480:	af 91       	pop	r26
    1482:	9f 91       	pop	r25
    1484:	8f 91       	pop	r24
    1486:	7f 91       	pop	r23
    1488:	6f 91       	pop	r22
    148a:	5f 91       	pop	r21
    148c:	4f 91       	pop	r20
    148e:	3f 91       	pop	r19
    1490:	2f 91       	pop	r18
    1492:	0f 90       	pop	r0
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	0f 90       	pop	r0
    1498:	1f 90       	pop	r1
    149a:	18 95       	reti

0000149c <__vector_7>:
ISR(TIMER1_OCA_vect)
{
    149c:	1f 92       	push	r1
    149e:	0f 92       	push	r0
    14a0:	0f b6       	in	r0, 0x3f	; 63
    14a2:	0f 92       	push	r0
    14a4:	11 24       	eor	r1, r1
    14a6:	2f 93       	push	r18
    14a8:	3f 93       	push	r19
    14aa:	4f 93       	push	r20
    14ac:	5f 93       	push	r21
    14ae:	6f 93       	push	r22
    14b0:	7f 93       	push	r23
    14b2:	8f 93       	push	r24
    14b4:	9f 93       	push	r25
    14b6:	af 93       	push	r26
    14b8:	bf 93       	push	r27
    14ba:	ef 93       	push	r30
    14bc:	ff 93       	push	r31
    14be:	df 93       	push	r29
    14c0:	cf 93       	push	r28
    14c2:	cd b7       	in	r28, 0x3d	; 61
    14c4:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCA_Fptr!=NULL)
    14c6:	80 91 b4 00 	lds	r24, 0x00B4
    14ca:	90 91 b5 00 	lds	r25, 0x00B5
    14ce:	00 97       	sbiw	r24, 0x00	; 0
    14d0:	29 f0       	breq	.+10     	; 0x14dc <__vector_7+0x40>
	{
		Timer1_OCA_Fptr();
    14d2:	e0 91 b4 00 	lds	r30, 0x00B4
    14d6:	f0 91 b5 00 	lds	r31, 0x00B5
    14da:	09 95       	icall
	}
}
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	ff 91       	pop	r31
    14e2:	ef 91       	pop	r30
    14e4:	bf 91       	pop	r27
    14e6:	af 91       	pop	r26
    14e8:	9f 91       	pop	r25
    14ea:	8f 91       	pop	r24
    14ec:	7f 91       	pop	r23
    14ee:	6f 91       	pop	r22
    14f0:	5f 91       	pop	r21
    14f2:	4f 91       	pop	r20
    14f4:	3f 91       	pop	r19
    14f6:	2f 91       	pop	r18
    14f8:	0f 90       	pop	r0
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	0f 90       	pop	r0
    14fe:	1f 90       	pop	r1
    1500:	18 95       	reti

00001502 <__vector_8>:
ISR(TIMER1_OCB_vect)
{
    1502:	1f 92       	push	r1
    1504:	0f 92       	push	r0
    1506:	0f b6       	in	r0, 0x3f	; 63
    1508:	0f 92       	push	r0
    150a:	11 24       	eor	r1, r1
    150c:	2f 93       	push	r18
    150e:	3f 93       	push	r19
    1510:	4f 93       	push	r20
    1512:	5f 93       	push	r21
    1514:	6f 93       	push	r22
    1516:	7f 93       	push	r23
    1518:	8f 93       	push	r24
    151a:	9f 93       	push	r25
    151c:	af 93       	push	r26
    151e:	bf 93       	push	r27
    1520:	ef 93       	push	r30
    1522:	ff 93       	push	r31
    1524:	df 93       	push	r29
    1526:	cf 93       	push	r28
    1528:	cd b7       	in	r28, 0x3d	; 61
    152a:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_OCB_Fptr!=NULL)
    152c:	80 91 b6 00 	lds	r24, 0x00B6
    1530:	90 91 b7 00 	lds	r25, 0x00B7
    1534:	00 97       	sbiw	r24, 0x00	; 0
    1536:	29 f0       	breq	.+10     	; 0x1542 <__vector_8+0x40>
	{
		Timer1_OCB_Fptr();
    1538:	e0 91 b6 00 	lds	r30, 0x00B6
    153c:	f0 91 b7 00 	lds	r31, 0x00B7
    1540:	09 95       	icall
	}
}
    1542:	cf 91       	pop	r28
    1544:	df 91       	pop	r29
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	bf 91       	pop	r27
    154c:	af 91       	pop	r26
    154e:	9f 91       	pop	r25
    1550:	8f 91       	pop	r24
    1552:	7f 91       	pop	r23
    1554:	6f 91       	pop	r22
    1556:	5f 91       	pop	r21
    1558:	4f 91       	pop	r20
    155a:	3f 91       	pop	r19
    155c:	2f 91       	pop	r18
    155e:	0f 90       	pop	r0
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	0f 90       	pop	r0
    1564:	1f 90       	pop	r1
    1566:	18 95       	reti

00001568 <__vector_6>:
ISR(TIMER1_ICU_vect)
{
    1568:	1f 92       	push	r1
    156a:	0f 92       	push	r0
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	0f 92       	push	r0
    1570:	11 24       	eor	r1, r1
    1572:	2f 93       	push	r18
    1574:	3f 93       	push	r19
    1576:	4f 93       	push	r20
    1578:	5f 93       	push	r21
    157a:	6f 93       	push	r22
    157c:	7f 93       	push	r23
    157e:	8f 93       	push	r24
    1580:	9f 93       	push	r25
    1582:	af 93       	push	r26
    1584:	bf 93       	push	r27
    1586:	ef 93       	push	r30
    1588:	ff 93       	push	r31
    158a:	df 93       	push	r29
    158c:	cf 93       	push	r28
    158e:	cd b7       	in	r28, 0x3d	; 61
    1590:	de b7       	in	r29, 0x3e	; 62
	if(Timer1_ICU_Fptr!=NULL)
    1592:	80 91 b8 00 	lds	r24, 0x00B8
    1596:	90 91 b9 00 	lds	r25, 0x00B9
    159a:	00 97       	sbiw	r24, 0x00	; 0
    159c:	29 f0       	breq	.+10     	; 0x15a8 <__vector_6+0x40>
	{
		Timer1_ICU_Fptr();
    159e:	e0 91 b8 00 	lds	r30, 0x00B8
    15a2:	f0 91 b9 00 	lds	r31, 0x00B9
    15a6:	09 95       	icall
	}
}
    15a8:	cf 91       	pop	r28
    15aa:	df 91       	pop	r29
    15ac:	ff 91       	pop	r31
    15ae:	ef 91       	pop	r30
    15b0:	bf 91       	pop	r27
    15b2:	af 91       	pop	r26
    15b4:	9f 91       	pop	r25
    15b6:	8f 91       	pop	r24
    15b8:	7f 91       	pop	r23
    15ba:	6f 91       	pop	r22
    15bc:	5f 91       	pop	r21
    15be:	4f 91       	pop	r20
    15c0:	3f 91       	pop	r19
    15c2:	2f 91       	pop	r18
    15c4:	0f 90       	pop	r0
    15c6:	0f be       	out	0x3f, r0	; 63
    15c8:	0f 90       	pop	r0
    15ca:	1f 90       	pop	r1
    15cc:	18 95       	reti

000015ce <GIE_voidEnable>:
#include "../../LIB/BIT_MATH.h"
#include "GIE_interface.h"
#include "GIE_register.h"

void GIE_voidEnable(void)
{
    15ce:	df 93       	push	r29
    15d0:	cf 93       	push	r28
    15d2:	cd b7       	in	r28, 0x3d	; 61
    15d4:	de b7       	in	r29, 0x3e	; 62
   SET_BIT(SREG,SREG_I);
    15d6:	af e5       	ldi	r26, 0x5F	; 95
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	ef e5       	ldi	r30, 0x5F	; 95
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	80 68       	ori	r24, 0x80	; 128
    15e2:	8c 93       	st	X, r24
}
    15e4:	cf 91       	pop	r28
    15e6:	df 91       	pop	r29
    15e8:	08 95       	ret

000015ea <GIE_voidDisable>:


void GIE_voidDisable(void)
{
    15ea:	df 93       	push	r29
    15ec:	cf 93       	push	r28
    15ee:	cd b7       	in	r28, 0x3d	; 61
    15f0:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
    15f2:	af e5       	ldi	r26, 0x5F	; 95
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	ef e5       	ldi	r30, 0x5F	; 95
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8f 77       	andi	r24, 0x7F	; 127
    15fe:	8c 93       	st	X, r24

}
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <DIO_u8SetPinDirection>:
#include "DIO_config.h"
#include "DIO_private.h"
#include "DIO_register.h"

u8 DIO_u8SetPinDirection(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Direction)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	cd b7       	in	r28, 0x3d	; 61
    160c:	de b7       	in	r29, 0x3e	; 62
    160e:	28 97       	sbiw	r28, 0x08	; 8
    1610:	0f b6       	in	r0, 0x3f	; 63
    1612:	f8 94       	cli
    1614:	de bf       	out	0x3e, r29	; 62
    1616:	0f be       	out	0x3f, r0	; 63
    1618:	cd bf       	out	0x3d, r28	; 61
    161a:	8a 83       	std	Y+2, r24	; 0x02
    161c:	6b 83       	std	Y+3, r22	; 0x03
    161e:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8Error_Sate =0;
    1620:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <=DIO_u8_PIN7)
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	88 30       	cpi	r24, 0x08	; 8
    1626:	08 f0       	brcs	.+2      	; 0x162a <DIO_u8SetPinDirection+0x24>
    1628:	f4 c0       	rjmp	.+488    	; 0x1812 <DIO_u8SetPinDirection+0x20c>
	{
		if(Copy_u8Direction ==DIO_u8_PIN_OUTPUT)
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
    162c:	81 30       	cpi	r24, 0x01	; 1
    162e:	09 f0       	breq	.+2      	; 0x1632 <DIO_u8SetPinDirection+0x2c>
    1630:	72 c0       	rjmp	.+228    	; 0x1716 <DIO_u8SetPinDirection+0x110>
		{
			switch (Copy_u8Port)
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	28 2f       	mov	r18, r24
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	38 87       	std	Y+8, r19	; 0x08
    163a:	2f 83       	std	Y+7, r18	; 0x07
    163c:	8f 81       	ldd	r24, Y+7	; 0x07
    163e:	98 85       	ldd	r25, Y+8	; 0x08
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	91 05       	cpc	r25, r1
    1644:	49 f1       	breq	.+82     	; 0x1698 <DIO_u8SetPinDirection+0x92>
    1646:	2f 81       	ldd	r18, Y+7	; 0x07
    1648:	38 85       	ldd	r19, Y+8	; 0x08
    164a:	22 30       	cpi	r18, 0x02	; 2
    164c:	31 05       	cpc	r19, r1
    164e:	2c f4       	brge	.+10     	; 0x165a <DIO_u8SetPinDirection+0x54>
    1650:	8f 81       	ldd	r24, Y+7	; 0x07
    1652:	98 85       	ldd	r25, Y+8	; 0x08
    1654:	00 97       	sbiw	r24, 0x00	; 0
    1656:	61 f0       	breq	.+24     	; 0x1670 <DIO_u8SetPinDirection+0x6a>
    1658:	5b c0       	rjmp	.+182    	; 0x1710 <DIO_u8SetPinDirection+0x10a>
    165a:	2f 81       	ldd	r18, Y+7	; 0x07
    165c:	38 85       	ldd	r19, Y+8	; 0x08
    165e:	22 30       	cpi	r18, 0x02	; 2
    1660:	31 05       	cpc	r19, r1
    1662:	71 f1       	breq	.+92     	; 0x16c0 <DIO_u8SetPinDirection+0xba>
    1664:	8f 81       	ldd	r24, Y+7	; 0x07
    1666:	98 85       	ldd	r25, Y+8	; 0x08
    1668:	83 30       	cpi	r24, 0x03	; 3
    166a:	91 05       	cpc	r25, r1
    166c:	e9 f1       	breq	.+122    	; 0x16e8 <DIO_u8SetPinDirection+0xe2>
    166e:	50 c0       	rjmp	.+160    	; 0x1710 <DIO_u8SetPinDirection+0x10a>
			{
			case DIO_u8_PORTA : SET_BIT(DDRA,Copy_u8Pin); break;
    1670:	aa e3       	ldi	r26, 0x3A	; 58
    1672:	b0 e0       	ldi	r27, 0x00	; 0
    1674:	ea e3       	ldi	r30, 0x3A	; 58
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	28 2f       	mov	r18, r24
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	81 e0       	ldi	r24, 0x01	; 1
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	02 2e       	mov	r0, r18
    1688:	02 c0       	rjmp	.+4      	; 0x168e <DIO_u8SetPinDirection+0x88>
    168a:	88 0f       	add	r24, r24
    168c:	99 1f       	adc	r25, r25
    168e:	0a 94       	dec	r0
    1690:	e2 f7       	brpl	.-8      	; 0x168a <DIO_u8SetPinDirection+0x84>
    1692:	84 2b       	or	r24, r20
    1694:	8c 93       	st	X, r24
    1696:	bf c0       	rjmp	.+382    	; 0x1816 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTB : SET_BIT(DDRB,Copy_u8Pin); break;
    1698:	a7 e3       	ldi	r26, 0x37	; 55
    169a:	b0 e0       	ldi	r27, 0x00	; 0
    169c:	e7 e3       	ldi	r30, 0x37	; 55
    169e:	f0 e0       	ldi	r31, 0x00	; 0
    16a0:	80 81       	ld	r24, Z
    16a2:	48 2f       	mov	r20, r24
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	28 2f       	mov	r18, r24
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	02 2e       	mov	r0, r18
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <DIO_u8SetPinDirection+0xb0>
    16b2:	88 0f       	add	r24, r24
    16b4:	99 1f       	adc	r25, r25
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <DIO_u8SetPinDirection+0xac>
    16ba:	84 2b       	or	r24, r20
    16bc:	8c 93       	st	X, r24
    16be:	ab c0       	rjmp	.+342    	; 0x1816 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTC : SET_BIT(DDRC,Copy_u8Pin); break;
    16c0:	a4 e3       	ldi	r26, 0x34	; 52
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e4 e3       	ldi	r30, 0x34	; 52
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	48 2f       	mov	r20, r24
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	28 2f       	mov	r18, r24
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	02 2e       	mov	r0, r18
    16d8:	02 c0       	rjmp	.+4      	; 0x16de <DIO_u8SetPinDirection+0xd8>
    16da:	88 0f       	add	r24, r24
    16dc:	99 1f       	adc	r25, r25
    16de:	0a 94       	dec	r0
    16e0:	e2 f7       	brpl	.-8      	; 0x16da <DIO_u8SetPinDirection+0xd4>
    16e2:	84 2b       	or	r24, r20
    16e4:	8c 93       	st	X, r24
    16e6:	97 c0       	rjmp	.+302    	; 0x1816 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTD : SET_BIT(DDRD,Copy_u8Pin); break;
    16e8:	a1 e3       	ldi	r26, 0x31	; 49
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e1 e3       	ldi	r30, 0x31	; 49
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	48 2f       	mov	r20, r24
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	02 2e       	mov	r0, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <DIO_u8SetPinDirection+0x100>
    1702:	88 0f       	add	r24, r24
    1704:	99 1f       	adc	r25, r25
    1706:	0a 94       	dec	r0
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <DIO_u8SetPinDirection+0xfc>
    170a:	84 2b       	or	r24, r20
    170c:	8c 93       	st	X, r24
    170e:	83 c0       	rjmp	.+262    	; 0x1816 <DIO_u8SetPinDirection+0x210>
			default :Local_u8Error_Sate=1 ;
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	89 83       	std	Y+1, r24	; 0x01
    1714:	80 c0       	rjmp	.+256    	; 0x1816 <DIO_u8SetPinDirection+0x210>

			}
		}
		else if(Copy_u8Direction ==DIO_u8_PIN_INPUT)
    1716:	8c 81       	ldd	r24, Y+4	; 0x04
    1718:	88 23       	and	r24, r24
    171a:	09 f0       	breq	.+2      	; 0x171e <DIO_u8SetPinDirection+0x118>
    171c:	77 c0       	rjmp	.+238    	; 0x180c <DIO_u8SetPinDirection+0x206>
		{
			switch (Copy_u8Port)
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	3e 83       	std	Y+6, r19	; 0x06
    1726:	2d 83       	std	Y+5, r18	; 0x05
    1728:	8d 81       	ldd	r24, Y+5	; 0x05
    172a:	9e 81       	ldd	r25, Y+6	; 0x06
    172c:	81 30       	cpi	r24, 0x01	; 1
    172e:	91 05       	cpc	r25, r1
    1730:	59 f1       	breq	.+86     	; 0x1788 <DIO_u8SetPinDirection+0x182>
    1732:	2d 81       	ldd	r18, Y+5	; 0x05
    1734:	3e 81       	ldd	r19, Y+6	; 0x06
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	2c f4       	brge	.+10     	; 0x1746 <DIO_u8SetPinDirection+0x140>
    173c:	8d 81       	ldd	r24, Y+5	; 0x05
    173e:	9e 81       	ldd	r25, Y+6	; 0x06
    1740:	00 97       	sbiw	r24, 0x00	; 0
    1742:	69 f0       	breq	.+26     	; 0x175e <DIO_u8SetPinDirection+0x158>
    1744:	60 c0       	rjmp	.+192    	; 0x1806 <DIO_u8SetPinDirection+0x200>
    1746:	2d 81       	ldd	r18, Y+5	; 0x05
    1748:	3e 81       	ldd	r19, Y+6	; 0x06
    174a:	22 30       	cpi	r18, 0x02	; 2
    174c:	31 05       	cpc	r19, r1
    174e:	89 f1       	breq	.+98     	; 0x17b2 <DIO_u8SetPinDirection+0x1ac>
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	83 30       	cpi	r24, 0x03	; 3
    1756:	91 05       	cpc	r25, r1
    1758:	09 f4       	brne	.+2      	; 0x175c <DIO_u8SetPinDirection+0x156>
    175a:	40 c0       	rjmp	.+128    	; 0x17dc <DIO_u8SetPinDirection+0x1d6>
    175c:	54 c0       	rjmp	.+168    	; 0x1806 <DIO_u8SetPinDirection+0x200>
			{
			case DIO_u8_PORTA : CLR_BIT(DDRA,Copy_u8Pin); break;
    175e:	aa e3       	ldi	r26, 0x3A	; 58
    1760:	b0 e0       	ldi	r27, 0x00	; 0
    1762:	ea e3       	ldi	r30, 0x3A	; 58
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	48 2f       	mov	r20, r24
    176a:	8b 81       	ldd	r24, Y+3	; 0x03
    176c:	28 2f       	mov	r18, r24
    176e:	30 e0       	ldi	r19, 0x00	; 0
    1770:	81 e0       	ldi	r24, 0x01	; 1
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	02 2e       	mov	r0, r18
    1776:	02 c0       	rjmp	.+4      	; 0x177c <DIO_u8SetPinDirection+0x176>
    1778:	88 0f       	add	r24, r24
    177a:	99 1f       	adc	r25, r25
    177c:	0a 94       	dec	r0
    177e:	e2 f7       	brpl	.-8      	; 0x1778 <DIO_u8SetPinDirection+0x172>
    1780:	80 95       	com	r24
    1782:	84 23       	and	r24, r20
    1784:	8c 93       	st	X, r24
    1786:	47 c0       	rjmp	.+142    	; 0x1816 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTB : CLR_BIT(DDRB,Copy_u8Pin); break;
    1788:	a7 e3       	ldi	r26, 0x37	; 55
    178a:	b0 e0       	ldi	r27, 0x00	; 0
    178c:	e7 e3       	ldi	r30, 0x37	; 55
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	80 81       	ld	r24, Z
    1792:	48 2f       	mov	r20, r24
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	28 2f       	mov	r18, r24
    1798:	30 e0       	ldi	r19, 0x00	; 0
    179a:	81 e0       	ldi	r24, 0x01	; 1
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	02 2e       	mov	r0, r18
    17a0:	02 c0       	rjmp	.+4      	; 0x17a6 <DIO_u8SetPinDirection+0x1a0>
    17a2:	88 0f       	add	r24, r24
    17a4:	99 1f       	adc	r25, r25
    17a6:	0a 94       	dec	r0
    17a8:	e2 f7       	brpl	.-8      	; 0x17a2 <DIO_u8SetPinDirection+0x19c>
    17aa:	80 95       	com	r24
    17ac:	84 23       	and	r24, r20
    17ae:	8c 93       	st	X, r24
    17b0:	32 c0       	rjmp	.+100    	; 0x1816 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTC : CLR_BIT(DDRC,Copy_u8Pin); break;
    17b2:	a4 e3       	ldi	r26, 0x34	; 52
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e4 e3       	ldi	r30, 0x34	; 52
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	48 2f       	mov	r20, r24
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	28 2f       	mov	r18, r24
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	02 2e       	mov	r0, r18
    17ca:	02 c0       	rjmp	.+4      	; 0x17d0 <DIO_u8SetPinDirection+0x1ca>
    17cc:	88 0f       	add	r24, r24
    17ce:	99 1f       	adc	r25, r25
    17d0:	0a 94       	dec	r0
    17d2:	e2 f7       	brpl	.-8      	; 0x17cc <DIO_u8SetPinDirection+0x1c6>
    17d4:	80 95       	com	r24
    17d6:	84 23       	and	r24, r20
    17d8:	8c 93       	st	X, r24
    17da:	1d c0       	rjmp	.+58     	; 0x1816 <DIO_u8SetPinDirection+0x210>
			case DIO_u8_PORTD : CLR_BIT(DDRD,Copy_u8Pin); break;
    17dc:	a1 e3       	ldi	r26, 0x31	; 49
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e1 e3       	ldi	r30, 0x31	; 49
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8b 81       	ldd	r24, Y+3	; 0x03
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <DIO_u8SetPinDirection+0x1f4>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <DIO_u8SetPinDirection+0x1f0>
    17fe:	80 95       	com	r24
    1800:	84 23       	and	r24, r20
    1802:	8c 93       	st	X, r24
    1804:	08 c0       	rjmp	.+16     	; 0x1816 <DIO_u8SetPinDirection+0x210>
			default :Local_u8Error_Sate=1 ;
    1806:	81 e0       	ldi	r24, 0x01	; 1
    1808:	89 83       	std	Y+1, r24	; 0x01
    180a:	05 c0       	rjmp	.+10     	; 0x1816 <DIO_u8SetPinDirection+0x210>

			}
		}
		else
		{
			Local_u8Error_Sate=1 ;
    180c:	81 e0       	ldi	r24, 0x01	; 1
    180e:	89 83       	std	Y+1, r24	; 0x01
    1810:	02 c0       	rjmp	.+4      	; 0x1816 <DIO_u8SetPinDirection+0x210>
		}
	}
	else
	{
		Local_u8Error_Sate=1;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8Error_Sate;
    1816:	89 81       	ldd	r24, Y+1	; 0x01
}
    1818:	28 96       	adiw	r28, 0x08	; 8
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <DIO_u8SetPortDirection>:



u8 DIO_u8SetPortDirection(u8 Copy_u8Port, u8 Copy_u8Direction)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <DIO_u8SetPortDirection+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <DIO_u8SetPortDirection+0x8>
    1832:	0f 92       	push	r0
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
    1838:	8a 83       	std	Y+2, r24	; 0x02
    183a:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8_ErrorState=0;
    183c:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    183e:	8a 81       	ldd	r24, Y+2	; 0x02
    1840:	28 2f       	mov	r18, r24
    1842:	30 e0       	ldi	r19, 0x00	; 0
    1844:	3d 83       	std	Y+5, r19	; 0x05
    1846:	2c 83       	std	Y+4, r18	; 0x04
    1848:	8c 81       	ldd	r24, Y+4	; 0x04
    184a:	9d 81       	ldd	r25, Y+5	; 0x05
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	91 05       	cpc	r25, r1
    1850:	d1 f0       	breq	.+52     	; 0x1886 <DIO_u8SetPortDirection+0x5c>
    1852:	2c 81       	ldd	r18, Y+4	; 0x04
    1854:	3d 81       	ldd	r19, Y+5	; 0x05
    1856:	22 30       	cpi	r18, 0x02	; 2
    1858:	31 05       	cpc	r19, r1
    185a:	2c f4       	brge	.+10     	; 0x1866 <DIO_u8SetPortDirection+0x3c>
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	9d 81       	ldd	r25, Y+5	; 0x05
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	61 f0       	breq	.+24     	; 0x187c <DIO_u8SetPortDirection+0x52>
    1864:	1f c0       	rjmp	.+62     	; 0x18a4 <DIO_u8SetPortDirection+0x7a>
    1866:	2c 81       	ldd	r18, Y+4	; 0x04
    1868:	3d 81       	ldd	r19, Y+5	; 0x05
    186a:	22 30       	cpi	r18, 0x02	; 2
    186c:	31 05       	cpc	r19, r1
    186e:	81 f0       	breq	.+32     	; 0x1890 <DIO_u8SetPortDirection+0x66>
    1870:	8c 81       	ldd	r24, Y+4	; 0x04
    1872:	9d 81       	ldd	r25, Y+5	; 0x05
    1874:	83 30       	cpi	r24, 0x03	; 3
    1876:	91 05       	cpc	r25, r1
    1878:	81 f0       	breq	.+32     	; 0x189a <DIO_u8SetPortDirection+0x70>
    187a:	14 c0       	rjmp	.+40     	; 0x18a4 <DIO_u8SetPortDirection+0x7a>
	{
	case DIO_u8_PORTA : DDRA =Copy_u8Direction; break;
    187c:	ea e3       	ldi	r30, 0x3A	; 58
    187e:	f0 e0       	ldi	r31, 0x00	; 0
    1880:	8b 81       	ldd	r24, Y+3	; 0x03
    1882:	80 83       	st	Z, r24
    1884:	11 c0       	rjmp	.+34     	; 0x18a8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTB : DDRB =Copy_u8Direction; break;
    1886:	e7 e3       	ldi	r30, 0x37	; 55
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	80 83       	st	Z, r24
    188e:	0c c0       	rjmp	.+24     	; 0x18a8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTC : DDRC =Copy_u8Direction; break;
    1890:	e4 e3       	ldi	r30, 0x34	; 52
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	80 83       	st	Z, r24
    1898:	07 c0       	rjmp	.+14     	; 0x18a8 <DIO_u8SetPortDirection+0x7e>
	case DIO_u8_PORTD : DDRD =Copy_u8Direction; break;
    189a:	e1 e3       	ldi	r30, 0x31	; 49
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	8b 81       	ldd	r24, Y+3	; 0x03
    18a0:	80 83       	st	Z, r24
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <DIO_u8SetPortDirection+0x7e>
	default :Local_u8_ErrorState=1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01

}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <DIO_u8SetPinValue>:



u8 DIO_u8SetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	cd b7       	in	r28, 0x3d	; 61
    18c0:	de b7       	in	r29, 0x3e	; 62
    18c2:	28 97       	sbiw	r28, 0x08	; 8
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	8a 83       	std	Y+2, r24	; 0x02
    18d0:	6b 83       	std	Y+3, r22	; 0x03
    18d2:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState=0;
    18d4:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8Pin <=DIO_u8_PIN7)
    18d6:	8b 81       	ldd	r24, Y+3	; 0x03
    18d8:	88 30       	cpi	r24, 0x08	; 8
    18da:	08 f0       	brcs	.+2      	; 0x18de <DIO_u8SetPinValue+0x24>
    18dc:	f4 c0       	rjmp	.+488    	; 0x1ac6 <DIO_u8SetPinValue+0x20c>
	{
		if(Copy_u8Value ==DIO_u8_PIN_HIGH)
    18de:	8c 81       	ldd	r24, Y+4	; 0x04
    18e0:	81 30       	cpi	r24, 0x01	; 1
    18e2:	09 f0       	breq	.+2      	; 0x18e6 <DIO_u8SetPinValue+0x2c>
    18e4:	72 c0       	rjmp	.+228    	; 0x19ca <DIO_u8SetPinValue+0x110>
		{
			switch (Copy_u8Port)
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	38 87       	std	Y+8, r19	; 0x08
    18ee:	2f 83       	std	Y+7, r18	; 0x07
    18f0:	8f 81       	ldd	r24, Y+7	; 0x07
    18f2:	98 85       	ldd	r25, Y+8	; 0x08
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	91 05       	cpc	r25, r1
    18f8:	49 f1       	breq	.+82     	; 0x194c <DIO_u8SetPinValue+0x92>
    18fa:	2f 81       	ldd	r18, Y+7	; 0x07
    18fc:	38 85       	ldd	r19, Y+8	; 0x08
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	31 05       	cpc	r19, r1
    1902:	2c f4       	brge	.+10     	; 0x190e <DIO_u8SetPinValue+0x54>
    1904:	8f 81       	ldd	r24, Y+7	; 0x07
    1906:	98 85       	ldd	r25, Y+8	; 0x08
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	61 f0       	breq	.+24     	; 0x1924 <DIO_u8SetPinValue+0x6a>
    190c:	5b c0       	rjmp	.+182    	; 0x19c4 <DIO_u8SetPinValue+0x10a>
    190e:	2f 81       	ldd	r18, Y+7	; 0x07
    1910:	38 85       	ldd	r19, Y+8	; 0x08
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 05       	cpc	r19, r1
    1916:	71 f1       	breq	.+92     	; 0x1974 <DIO_u8SetPinValue+0xba>
    1918:	8f 81       	ldd	r24, Y+7	; 0x07
    191a:	98 85       	ldd	r25, Y+8	; 0x08
    191c:	83 30       	cpi	r24, 0x03	; 3
    191e:	91 05       	cpc	r25, r1
    1920:	e9 f1       	breq	.+122    	; 0x199c <DIO_u8SetPinValue+0xe2>
    1922:	50 c0       	rjmp	.+160    	; 0x19c4 <DIO_u8SetPinValue+0x10a>
			{
			case DIO_u8_PORTA :SET_BIT(PORTA,Copy_u8Pin); break;
    1924:	ab e3       	ldi	r26, 0x3B	; 59
    1926:	b0 e0       	ldi	r27, 0x00	; 0
    1928:	eb e3       	ldi	r30, 0x3B	; 59
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	80 81       	ld	r24, Z
    192e:	48 2f       	mov	r20, r24
    1930:	8b 81       	ldd	r24, Y+3	; 0x03
    1932:	28 2f       	mov	r18, r24
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	90 e0       	ldi	r25, 0x00	; 0
    193a:	02 2e       	mov	r0, r18
    193c:	02 c0       	rjmp	.+4      	; 0x1942 <DIO_u8SetPinValue+0x88>
    193e:	88 0f       	add	r24, r24
    1940:	99 1f       	adc	r25, r25
    1942:	0a 94       	dec	r0
    1944:	e2 f7       	brpl	.-8      	; 0x193e <DIO_u8SetPinValue+0x84>
    1946:	84 2b       	or	r24, r20
    1948:	8c 93       	st	X, r24
    194a:	bf c0       	rjmp	.+382    	; 0x1aca <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTB :SET_BIT(PORTB,Copy_u8Pin); break;
    194c:	a8 e3       	ldi	r26, 0x38	; 56
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e8 e3       	ldi	r30, 0x38	; 56
    1952:	f0 e0       	ldi	r31, 0x00	; 0
    1954:	80 81       	ld	r24, Z
    1956:	48 2f       	mov	r20, r24
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	28 2f       	mov	r18, r24
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	81 e0       	ldi	r24, 0x01	; 1
    1960:	90 e0       	ldi	r25, 0x00	; 0
    1962:	02 2e       	mov	r0, r18
    1964:	02 c0       	rjmp	.+4      	; 0x196a <DIO_u8SetPinValue+0xb0>
    1966:	88 0f       	add	r24, r24
    1968:	99 1f       	adc	r25, r25
    196a:	0a 94       	dec	r0
    196c:	e2 f7       	brpl	.-8      	; 0x1966 <DIO_u8SetPinValue+0xac>
    196e:	84 2b       	or	r24, r20
    1970:	8c 93       	st	X, r24
    1972:	ab c0       	rjmp	.+342    	; 0x1aca <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTC :SET_BIT(PORTC,Copy_u8Pin); break;
    1974:	a5 e3       	ldi	r26, 0x35	; 53
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	e5 e3       	ldi	r30, 0x35	; 53
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	80 81       	ld	r24, Z
    197e:	48 2f       	mov	r20, r24
    1980:	8b 81       	ldd	r24, Y+3	; 0x03
    1982:	28 2f       	mov	r18, r24
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	02 2e       	mov	r0, r18
    198c:	02 c0       	rjmp	.+4      	; 0x1992 <DIO_u8SetPinValue+0xd8>
    198e:	88 0f       	add	r24, r24
    1990:	99 1f       	adc	r25, r25
    1992:	0a 94       	dec	r0
    1994:	e2 f7       	brpl	.-8      	; 0x198e <DIO_u8SetPinValue+0xd4>
    1996:	84 2b       	or	r24, r20
    1998:	8c 93       	st	X, r24
    199a:	97 c0       	rjmp	.+302    	; 0x1aca <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTD :SET_BIT(PORTD,Copy_u8Pin); break;
    199c:	a2 e3       	ldi	r26, 0x32	; 50
    199e:	b0 e0       	ldi	r27, 0x00	; 0
    19a0:	e2 e3       	ldi	r30, 0x32	; 50
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	80 81       	ld	r24, Z
    19a6:	48 2f       	mov	r20, r24
    19a8:	8b 81       	ldd	r24, Y+3	; 0x03
    19aa:	28 2f       	mov	r18, r24
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	02 2e       	mov	r0, r18
    19b4:	02 c0       	rjmp	.+4      	; 0x19ba <DIO_u8SetPinValue+0x100>
    19b6:	88 0f       	add	r24, r24
    19b8:	99 1f       	adc	r25, r25
    19ba:	0a 94       	dec	r0
    19bc:	e2 f7       	brpl	.-8      	; 0x19b6 <DIO_u8SetPinValue+0xfc>
    19be:	84 2b       	or	r24, r20
    19c0:	8c 93       	st	X, r24
    19c2:	83 c0       	rjmp	.+262    	; 0x1aca <DIO_u8SetPinValue+0x210>
			default :Local_u8_ErrorState =1 ;
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	89 83       	std	Y+1, r24	; 0x01
    19c8:	80 c0       	rjmp	.+256    	; 0x1aca <DIO_u8SetPinValue+0x210>
			}
		}
		else if(Copy_u8Value ==DIO_u8_PIN_LOW)
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	88 23       	and	r24, r24
    19ce:	09 f0       	breq	.+2      	; 0x19d2 <DIO_u8SetPinValue+0x118>
    19d0:	77 c0       	rjmp	.+238    	; 0x1ac0 <DIO_u8SetPinValue+0x206>
		{
			switch (Copy_u8Port)
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	28 2f       	mov	r18, r24
    19d6:	30 e0       	ldi	r19, 0x00	; 0
    19d8:	3e 83       	std	Y+6, r19	; 0x06
    19da:	2d 83       	std	Y+5, r18	; 0x05
    19dc:	8d 81       	ldd	r24, Y+5	; 0x05
    19de:	9e 81       	ldd	r25, Y+6	; 0x06
    19e0:	81 30       	cpi	r24, 0x01	; 1
    19e2:	91 05       	cpc	r25, r1
    19e4:	59 f1       	breq	.+86     	; 0x1a3c <DIO_u8SetPinValue+0x182>
    19e6:	2d 81       	ldd	r18, Y+5	; 0x05
    19e8:	3e 81       	ldd	r19, Y+6	; 0x06
    19ea:	22 30       	cpi	r18, 0x02	; 2
    19ec:	31 05       	cpc	r19, r1
    19ee:	2c f4       	brge	.+10     	; 0x19fa <DIO_u8SetPinValue+0x140>
    19f0:	8d 81       	ldd	r24, Y+5	; 0x05
    19f2:	9e 81       	ldd	r25, Y+6	; 0x06
    19f4:	00 97       	sbiw	r24, 0x00	; 0
    19f6:	69 f0       	breq	.+26     	; 0x1a12 <DIO_u8SetPinValue+0x158>
    19f8:	60 c0       	rjmp	.+192    	; 0x1aba <DIO_u8SetPinValue+0x200>
    19fa:	2d 81       	ldd	r18, Y+5	; 0x05
    19fc:	3e 81       	ldd	r19, Y+6	; 0x06
    19fe:	22 30       	cpi	r18, 0x02	; 2
    1a00:	31 05       	cpc	r19, r1
    1a02:	89 f1       	breq	.+98     	; 0x1a66 <DIO_u8SetPinValue+0x1ac>
    1a04:	8d 81       	ldd	r24, Y+5	; 0x05
    1a06:	9e 81       	ldd	r25, Y+6	; 0x06
    1a08:	83 30       	cpi	r24, 0x03	; 3
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	09 f4       	brne	.+2      	; 0x1a10 <DIO_u8SetPinValue+0x156>
    1a0e:	40 c0       	rjmp	.+128    	; 0x1a90 <DIO_u8SetPinValue+0x1d6>
    1a10:	54 c0       	rjmp	.+168    	; 0x1aba <DIO_u8SetPinValue+0x200>
			{
			case DIO_u8_PORTA :CLR_BIT(PORTA,Copy_u8Pin); break;
    1a12:	ab e3       	ldi	r26, 0x3B	; 59
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	eb e3       	ldi	r30, 0x3B	; 59
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	48 2f       	mov	r20, r24
    1a1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a20:	28 2f       	mov	r18, r24
    1a22:	30 e0       	ldi	r19, 0x00	; 0
    1a24:	81 e0       	ldi	r24, 0x01	; 1
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	02 2e       	mov	r0, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_u8SetPinValue+0x176>
    1a2c:	88 0f       	add	r24, r24
    1a2e:	99 1f       	adc	r25, r25
    1a30:	0a 94       	dec	r0
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_u8SetPinValue+0x172>
    1a34:	80 95       	com	r24
    1a36:	84 23       	and	r24, r20
    1a38:	8c 93       	st	X, r24
    1a3a:	47 c0       	rjmp	.+142    	; 0x1aca <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTB :CLR_BIT(PORTB,Copy_u8Pin); break;
    1a3c:	a8 e3       	ldi	r26, 0x38	; 56
    1a3e:	b0 e0       	ldi	r27, 0x00	; 0
    1a40:	e8 e3       	ldi	r30, 0x38	; 56
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	80 81       	ld	r24, Z
    1a46:	48 2f       	mov	r20, r24
    1a48:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 2e       	mov	r0, r18
    1a54:	02 c0       	rjmp	.+4      	; 0x1a5a <DIO_u8SetPinValue+0x1a0>
    1a56:	88 0f       	add	r24, r24
    1a58:	99 1f       	adc	r25, r25
    1a5a:	0a 94       	dec	r0
    1a5c:	e2 f7       	brpl	.-8      	; 0x1a56 <DIO_u8SetPinValue+0x19c>
    1a5e:	80 95       	com	r24
    1a60:	84 23       	and	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	32 c0       	rjmp	.+100    	; 0x1aca <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTC :CLR_BIT(PORTC,Copy_u8Pin); break;
    1a66:	a5 e3       	ldi	r26, 0x35	; 53
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e5 e3       	ldi	r30, 0x35	; 53
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <DIO_u8SetPinValue+0x1ca>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <DIO_u8SetPinValue+0x1c6>
    1a88:	80 95       	com	r24
    1a8a:	84 23       	and	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	1d c0       	rjmp	.+58     	; 0x1aca <DIO_u8SetPinValue+0x210>
			case DIO_u8_PORTD :CLR_BIT(PORTD,Copy_u8Pin); break;
    1a90:	a2 e3       	ldi	r26, 0x32	; 50
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e2 e3       	ldi	r30, 0x32	; 50
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	48 2f       	mov	r20, r24
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	28 2f       	mov	r18, r24
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	81 e0       	ldi	r24, 0x01	; 1
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	02 2e       	mov	r0, r18
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <DIO_u8SetPinValue+0x1f4>
    1aaa:	88 0f       	add	r24, r24
    1aac:	99 1f       	adc	r25, r25
    1aae:	0a 94       	dec	r0
    1ab0:	e2 f7       	brpl	.-8      	; 0x1aaa <DIO_u8SetPinValue+0x1f0>
    1ab2:	80 95       	com	r24
    1ab4:	84 23       	and	r24, r20
    1ab6:	8c 93       	st	X, r24
    1ab8:	08 c0       	rjmp	.+16     	; 0x1aca <DIO_u8SetPinValue+0x210>
			default :Local_u8_ErrorState =1 ;
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	89 83       	std	Y+1, r24	; 0x01
    1abe:	05 c0       	rjmp	.+10     	; 0x1aca <DIO_u8SetPinValue+0x210>

			}
		}
		else
		{
			Local_u8_ErrorState=1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	89 83       	std	Y+1, r24	; 0x01
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <DIO_u8SetPinValue+0x210>
		}
	}
	else
	{
		Local_u8_ErrorState=1;
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	89 83       	std	Y+1, r24	; 0x01

	}
	return Local_u8_ErrorState;
    1aca:	89 81       	ldd	r24, Y+1	; 0x01

}
    1acc:	28 96       	adiw	r28, 0x08	; 8
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	cf 91       	pop	r28
    1ada:	df 91       	pop	r29
    1adc:	08 95       	ret

00001ade <DIO_u8SetPortValue>:




u8 DIO_u8SetPortValue(u8 Copy_u8Port, u8 Copy_u8Value)
{
    1ade:	df 93       	push	r29
    1ae0:	cf 93       	push	r28
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <DIO_u8SetPortValue+0x6>
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <DIO_u8SetPortValue+0x8>
    1ae6:	0f 92       	push	r0
    1ae8:	cd b7       	in	r28, 0x3d	; 61
    1aea:	de b7       	in	r29, 0x3e	; 62
    1aec:	8a 83       	std	Y+2, r24	; 0x02
    1aee:	6b 83       	std	Y+3, r22	; 0x03

	u8 Local_u8_ErrorState=0;
    1af0:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Port)
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	28 2f       	mov	r18, r24
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	3d 83       	std	Y+5, r19	; 0x05
    1afa:	2c 83       	std	Y+4, r18	; 0x04
    1afc:	8c 81       	ldd	r24, Y+4	; 0x04
    1afe:	9d 81       	ldd	r25, Y+5	; 0x05
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	91 05       	cpc	r25, r1
    1b04:	d1 f0       	breq	.+52     	; 0x1b3a <DIO_u8SetPortValue+0x5c>
    1b06:	2c 81       	ldd	r18, Y+4	; 0x04
    1b08:	3d 81       	ldd	r19, Y+5	; 0x05
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	2c f4       	brge	.+10     	; 0x1b1a <DIO_u8SetPortValue+0x3c>
    1b10:	8c 81       	ldd	r24, Y+4	; 0x04
    1b12:	9d 81       	ldd	r25, Y+5	; 0x05
    1b14:	00 97       	sbiw	r24, 0x00	; 0
    1b16:	61 f0       	breq	.+24     	; 0x1b30 <DIO_u8SetPortValue+0x52>
    1b18:	1f c0       	rjmp	.+62     	; 0x1b58 <DIO_u8SetPortValue+0x7a>
    1b1a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b1c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b1e:	22 30       	cpi	r18, 0x02	; 2
    1b20:	31 05       	cpc	r19, r1
    1b22:	81 f0       	breq	.+32     	; 0x1b44 <DIO_u8SetPortValue+0x66>
    1b24:	8c 81       	ldd	r24, Y+4	; 0x04
    1b26:	9d 81       	ldd	r25, Y+5	; 0x05
    1b28:	83 30       	cpi	r24, 0x03	; 3
    1b2a:	91 05       	cpc	r25, r1
    1b2c:	81 f0       	breq	.+32     	; 0x1b4e <DIO_u8SetPortValue+0x70>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <DIO_u8SetPortValue+0x7a>
	{
	case DIO_u8_PORTA : PORTA =Copy_u8Value; break;
    1b30:	eb e3       	ldi	r30, 0x3B	; 59
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	80 83       	st	Z, r24
    1b38:	11 c0       	rjmp	.+34     	; 0x1b5c <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTB : PORTB =Copy_u8Value; break;
    1b3a:	e8 e3       	ldi	r30, 0x38	; 56
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	80 83       	st	Z, r24
    1b42:	0c c0       	rjmp	.+24     	; 0x1b5c <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTC : PORTC =Copy_u8Value; break;
    1b44:	e5 e3       	ldi	r30, 0x35	; 53
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	80 83       	st	Z, r24
    1b4c:	07 c0       	rjmp	.+14     	; 0x1b5c <DIO_u8SetPortValue+0x7e>
	case DIO_u8_PORTD : PORTD =Copy_u8Value; break;
    1b4e:	e2 e3       	ldi	r30, 0x32	; 50
    1b50:	f0 e0       	ldi	r31, 0x00	; 0
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	80 83       	st	Z, r24
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <DIO_u8SetPortValue+0x7e>
	default :Local_u8_ErrorState=1;
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8_ErrorState;
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01



}
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	0f 90       	pop	r0
    1b66:	0f 90       	pop	r0
    1b68:	cf 91       	pop	r28
    1b6a:	df 91       	pop	r29
    1b6c:	08 95       	ret

00001b6e <DIO_u8GetPinValue>:

u8 DIO_u8GetPinValue(u8 Copy_u8Port ,u8 Copy_u8Pin, u8 *Copy_Pu8Vlaue)
{
    1b6e:	df 93       	push	r29
    1b70:	cf 93       	push	r28
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	27 97       	sbiw	r28, 0x07	; 7
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	f8 94       	cli
    1b7c:	de bf       	out	0x3e, r29	; 62
    1b7e:	0f be       	out	0x3f, r0	; 63
    1b80:	cd bf       	out	0x3d, r28	; 61
    1b82:	8a 83       	std	Y+2, r24	; 0x02
    1b84:	6b 83       	std	Y+3, r22	; 0x03
    1b86:	5d 83       	std	Y+5, r21	; 0x05
    1b88:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8_ErrorState=0;
    1b8a:	19 82       	std	Y+1, r1	; 0x01
	if((Copy_Pu8Vlaue != NULL)&&(Copy_u8Pin <=DIO_u8_PIN7))
    1b8c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b8e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b90:	00 97       	sbiw	r24, 0x00	; 0
    1b92:	09 f4       	brne	.+2      	; 0x1b96 <DIO_u8GetPinValue+0x28>
    1b94:	78 c0       	rjmp	.+240    	; 0x1c86 <DIO_u8GetPinValue+0x118>
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	88 30       	cpi	r24, 0x08	; 8
    1b9a:	08 f0       	brcs	.+2      	; 0x1b9e <DIO_u8GetPinValue+0x30>
    1b9c:	74 c0       	rjmp	.+232    	; 0x1c86 <DIO_u8GetPinValue+0x118>
	{
		switch(Copy_u8Port)
    1b9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ba0:	28 2f       	mov	r18, r24
    1ba2:	30 e0       	ldi	r19, 0x00	; 0
    1ba4:	3f 83       	std	Y+7, r19	; 0x07
    1ba6:	2e 83       	std	Y+6, r18	; 0x06
    1ba8:	4e 81       	ldd	r20, Y+6	; 0x06
    1baa:	5f 81       	ldd	r21, Y+7	; 0x07
    1bac:	41 30       	cpi	r20, 0x01	; 1
    1bae:	51 05       	cpc	r21, r1
    1bb0:	59 f1       	breq	.+86     	; 0x1c08 <DIO_u8GetPinValue+0x9a>
    1bb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bb6:	82 30       	cpi	r24, 0x02	; 2
    1bb8:	91 05       	cpc	r25, r1
    1bba:	34 f4       	brge	.+12     	; 0x1bc8 <DIO_u8GetPinValue+0x5a>
    1bbc:	2e 81       	ldd	r18, Y+6	; 0x06
    1bbe:	3f 81       	ldd	r19, Y+7	; 0x07
    1bc0:	21 15       	cp	r18, r1
    1bc2:	31 05       	cpc	r19, r1
    1bc4:	69 f0       	breq	.+26     	; 0x1be0 <DIO_u8GetPinValue+0x72>
    1bc6:	5c c0       	rjmp	.+184    	; 0x1c80 <DIO_u8GetPinValue+0x112>
    1bc8:	4e 81       	ldd	r20, Y+6	; 0x06
    1bca:	5f 81       	ldd	r21, Y+7	; 0x07
    1bcc:	42 30       	cpi	r20, 0x02	; 2
    1bce:	51 05       	cpc	r21, r1
    1bd0:	79 f1       	breq	.+94     	; 0x1c30 <DIO_u8GetPinValue+0xc2>
    1bd2:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd4:	9f 81       	ldd	r25, Y+7	; 0x07
    1bd6:	83 30       	cpi	r24, 0x03	; 3
    1bd8:	91 05       	cpc	r25, r1
    1bda:	09 f4       	brne	.+2      	; 0x1bde <DIO_u8GetPinValue+0x70>
    1bdc:	3d c0       	rjmp	.+122    	; 0x1c58 <DIO_u8GetPinValue+0xea>
    1bde:	50 c0       	rjmp	.+160    	; 0x1c80 <DIO_u8GetPinValue+0x112>
		{
		case DIO_u8_PORTA : *Copy_Pu8Vlaue =GET_BIT(PINA , Copy_u8Pin); break;
    1be0:	e9 e3       	ldi	r30, 0x39	; 57
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	28 2f       	mov	r18, r24
    1be8:	30 e0       	ldi	r19, 0x00	; 0
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	88 2f       	mov	r24, r24
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a9 01       	movw	r20, r18
    1bf2:	02 c0       	rjmp	.+4      	; 0x1bf8 <DIO_u8GetPinValue+0x8a>
    1bf4:	55 95       	asr	r21
    1bf6:	47 95       	ror	r20
    1bf8:	8a 95       	dec	r24
    1bfa:	e2 f7       	brpl	.-8      	; 0x1bf4 <DIO_u8GetPinValue+0x86>
    1bfc:	ca 01       	movw	r24, r20
    1bfe:	81 70       	andi	r24, 0x01	; 1
    1c00:	ec 81       	ldd	r30, Y+4	; 0x04
    1c02:	fd 81       	ldd	r31, Y+5	; 0x05
    1c04:	80 83       	st	Z, r24
    1c06:	41 c0       	rjmp	.+130    	; 0x1c8a <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTB : *Copy_Pu8Vlaue =GET_BIT(PINB , Copy_u8Pin); break;
    1c08:	e6 e3       	ldi	r30, 0x36	; 54
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	8b 81       	ldd	r24, Y+3	; 0x03
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a9 01       	movw	r20, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <DIO_u8GetPinValue+0xb2>
    1c1c:	55 95       	asr	r21
    1c1e:	47 95       	ror	r20
    1c20:	8a 95       	dec	r24
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <DIO_u8GetPinValue+0xae>
    1c24:	ca 01       	movw	r24, r20
    1c26:	81 70       	andi	r24, 0x01	; 1
    1c28:	ec 81       	ldd	r30, Y+4	; 0x04
    1c2a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c2c:	80 83       	st	Z, r24
    1c2e:	2d c0       	rjmp	.+90     	; 0x1c8a <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTC : *Copy_Pu8Vlaue =GET_BIT(PINC , Copy_u8Pin); break;
    1c30:	e3 e3       	ldi	r30, 0x33	; 51
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3c:	88 2f       	mov	r24, r24
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	a9 01       	movw	r20, r18
    1c42:	02 c0       	rjmp	.+4      	; 0x1c48 <DIO_u8GetPinValue+0xda>
    1c44:	55 95       	asr	r21
    1c46:	47 95       	ror	r20
    1c48:	8a 95       	dec	r24
    1c4a:	e2 f7       	brpl	.-8      	; 0x1c44 <DIO_u8GetPinValue+0xd6>
    1c4c:	ca 01       	movw	r24, r20
    1c4e:	81 70       	andi	r24, 0x01	; 1
    1c50:	ec 81       	ldd	r30, Y+4	; 0x04
    1c52:	fd 81       	ldd	r31, Y+5	; 0x05
    1c54:	80 83       	st	Z, r24
    1c56:	19 c0       	rjmp	.+50     	; 0x1c8a <DIO_u8GetPinValue+0x11c>
		case DIO_u8_PORTD : *Copy_Pu8Vlaue =GET_BIT(PIND , Copy_u8Pin); break;
    1c58:	e0 e3       	ldi	r30, 0x30	; 48
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	80 81       	ld	r24, Z
    1c5e:	28 2f       	mov	r18, r24
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	88 2f       	mov	r24, r24
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	a9 01       	movw	r20, r18
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <DIO_u8GetPinValue+0x102>
    1c6c:	55 95       	asr	r21
    1c6e:	47 95       	ror	r20
    1c70:	8a 95       	dec	r24
    1c72:	e2 f7       	brpl	.-8      	; 0x1c6c <DIO_u8GetPinValue+0xfe>
    1c74:	ca 01       	movw	r24, r20
    1c76:	81 70       	andi	r24, 0x01	; 1
    1c78:	ec 81       	ldd	r30, Y+4	; 0x04
    1c7a:	fd 81       	ldd	r31, Y+5	; 0x05
    1c7c:	80 83       	st	Z, r24
    1c7e:	05 c0       	rjmp	.+10     	; 0x1c8a <DIO_u8GetPinValue+0x11c>
		default :Local_u8_ErrorState=1;
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_u8GetPinValue+0x11c>
		}
	}
	else
	{
		Local_u8_ErrorState=1;
    1c86:	81 e0       	ldi	r24, 0x01	; 1
    1c88:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_u8_ErrorState;
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01

}
    1c8c:	27 96       	adiw	r28, 0x07	; 7
    1c8e:	0f b6       	in	r0, 0x3f	; 63
    1c90:	f8 94       	cli
    1c92:	de bf       	out	0x3e, r29	; 62
    1c94:	0f be       	out	0x3f, r0	; 63
    1c96:	cd bf       	out	0x3d, r28	; 61
    1c98:	cf 91       	pop	r28
    1c9a:	df 91       	pop	r29
    1c9c:	08 95       	ret

00001c9e <HLCD_VoidInit>:




void HLCD_VoidInit(void)
{
    1c9e:	df 93       	push	r29
    1ca0:	cf 93       	push	r28
    1ca2:	cd b7       	in	r28, 0x3d	; 61
    1ca4:	de b7       	in	r29, 0x3e	; 62
    1ca6:	e8 97       	sbiw	r28, 0x38	; 56
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61

	/* set Port direction output */
	DIO_u8SetPortDirection(HLCD_U8_DATA_PORT,DIO_u8_PORT_OUTPUT);
    1cb2:	82 e0       	ldi	r24, 0x02	; 2
    1cb4:	6f ef       	ldi	r22, 0xFF	; 255
    1cb6:	0e 94 15 0c 	call	0x182a	; 0x182a <DIO_u8SetPortDirection>
	/* RS DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_OUTPUT);
    1cba:	83 e0       	ldi	r24, 0x03	; 3
    1cbc:	60 e0       	ldi	r22, 0x00	; 0
    1cbe:	41 e0       	ldi	r20, 0x01	; 1
    1cc0:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>
	/* RW DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_OUTPUT);
    1cc4:	83 e0       	ldi	r24, 0x03	; 3
    1cc6:	61 e0       	ldi	r22, 0x01	; 1
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>
	/* EN DIR OUT*/
	DIO_u8SetPinDirection(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_OUTPUT);
    1cce:	83 e0       	ldi	r24, 0x03	; 3
    1cd0:	62 e0       	ldi	r22, 0x02	; 2
    1cd2:	41 e0       	ldi	r20, 0x01	; 1
    1cd4:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	a0 e2       	ldi	r26, 0x20	; 32
    1cde:	b2 e4       	ldi	r27, 0x42	; 66
    1ce0:	8d ab       	std	Y+53, r24	; 0x35
    1ce2:	9e ab       	std	Y+54, r25	; 0x36
    1ce4:	af ab       	std	Y+55, r26	; 0x37
    1ce6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	6d a9       	ldd	r22, Y+53	; 0x35
    1cea:	7e a9       	ldd	r23, Y+54	; 0x36
    1cec:	8f a9       	ldd	r24, Y+55	; 0x37
    1cee:	98 ad       	ldd	r25, Y+56	; 0x38
    1cf0:	20 e0       	ldi	r18, 0x00	; 0
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	4a ef       	ldi	r20, 0xFA	; 250
    1cf6:	54 e4       	ldi	r21, 0x44	; 68
    1cf8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cfc:	dc 01       	movw	r26, r24
    1cfe:	cb 01       	movw	r24, r22
    1d00:	89 ab       	std	Y+49, r24	; 0x31
    1d02:	9a ab       	std	Y+50, r25	; 0x32
    1d04:	ab ab       	std	Y+51, r26	; 0x33
    1d06:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d08:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d10:	20 e0       	ldi	r18, 0x00	; 0
    1d12:	30 e0       	ldi	r19, 0x00	; 0
    1d14:	40 e8       	ldi	r20, 0x80	; 128
    1d16:	5f e3       	ldi	r21, 0x3F	; 63
    1d18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d1c:	88 23       	and	r24, r24
    1d1e:	2c f4       	brge	.+10     	; 0x1d2a <HLCD_VoidInit+0x8c>
		__ticks = 1;
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	98 ab       	std	Y+48, r25	; 0x30
    1d26:	8f a7       	std	Y+47, r24	; 0x2f
    1d28:	3f c0       	rjmp	.+126    	; 0x1da8 <HLCD_VoidInit+0x10a>
	else if (__tmp > 65535)
    1d2a:	69 a9       	ldd	r22, Y+49	; 0x31
    1d2c:	7a a9       	ldd	r23, Y+50	; 0x32
    1d2e:	8b a9       	ldd	r24, Y+51	; 0x33
    1d30:	9c a9       	ldd	r25, Y+52	; 0x34
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	3f ef       	ldi	r19, 0xFF	; 255
    1d36:	4f e7       	ldi	r20, 0x7F	; 127
    1d38:	57 e4       	ldi	r21, 0x47	; 71
    1d3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d3e:	18 16       	cp	r1, r24
    1d40:	4c f5       	brge	.+82     	; 0x1d94 <HLCD_VoidInit+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d42:	6d a9       	ldd	r22, Y+53	; 0x35
    1d44:	7e a9       	ldd	r23, Y+54	; 0x36
    1d46:	8f a9       	ldd	r24, Y+55	; 0x37
    1d48:	98 ad       	ldd	r25, Y+56	; 0x38
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e2       	ldi	r20, 0x20	; 32
    1d50:	51 e4       	ldi	r21, 0x41	; 65
    1d52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d56:	dc 01       	movw	r26, r24
    1d58:	cb 01       	movw	r24, r22
    1d5a:	bc 01       	movw	r22, r24
    1d5c:	cd 01       	movw	r24, r26
    1d5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	98 ab       	std	Y+48, r25	; 0x30
    1d68:	8f a7       	std	Y+47, r24	; 0x2f
    1d6a:	0f c0       	rjmp	.+30     	; 0x1d8a <HLCD_VoidInit+0xec>
    1d6c:	88 ec       	ldi	r24, 0xC8	; 200
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	9e a7       	std	Y+46, r25	; 0x2e
    1d72:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1d74:	8d a5       	ldd	r24, Y+45	; 0x2d
    1d76:	9e a5       	ldd	r25, Y+46	; 0x2e
    1d78:	01 97       	sbiw	r24, 0x01	; 1
    1d7a:	f1 f7       	brne	.-4      	; 0x1d78 <HLCD_VoidInit+0xda>
    1d7c:	9e a7       	std	Y+46, r25	; 0x2e
    1d7e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d80:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d82:	98 a9       	ldd	r25, Y+48	; 0x30
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	98 ab       	std	Y+48, r25	; 0x30
    1d88:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d8a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d8c:	98 a9       	ldd	r25, Y+48	; 0x30
    1d8e:	00 97       	sbiw	r24, 0x00	; 0
    1d90:	69 f7       	brne	.-38     	; 0x1d6c <HLCD_VoidInit+0xce>
    1d92:	14 c0       	rjmp	.+40     	; 0x1dbc <HLCD_VoidInit+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d94:	69 a9       	ldd	r22, Y+49	; 0x31
    1d96:	7a a9       	ldd	r23, Y+50	; 0x32
    1d98:	8b a9       	ldd	r24, Y+51	; 0x33
    1d9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1da0:	dc 01       	movw	r26, r24
    1da2:	cb 01       	movw	r24, r22
    1da4:	98 ab       	std	Y+48, r25	; 0x30
    1da6:	8f a7       	std	Y+47, r24	; 0x2f
    1da8:	8f a5       	ldd	r24, Y+47	; 0x2f
    1daa:	98 a9       	ldd	r25, Y+48	; 0x30
    1dac:	9c a7       	std	Y+44, r25	; 0x2c
    1dae:	8b a7       	std	Y+43, r24	; 0x2b
    1db0:	8b a5       	ldd	r24, Y+43	; 0x2b
    1db2:	9c a5       	ldd	r25, Y+44	; 0x2c
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <HLCD_VoidInit+0x116>
    1db8:	9c a7       	std	Y+44, r25	; 0x2c
    1dba:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);
	/* function set 8_bit mode , 2-Line ,font_type 5*7 */
	HLCD_VoidSendCommand(FUNCTIONSET);
    1dbc:	88 e3       	ldi	r24, 0x38	; 56
    1dbe:	0e 94 59 11 	call	0x22b2	; 0x22b2 <HLCD_VoidSendCommand>
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e8       	ldi	r26, 0x80	; 128
    1dc8:	bf e3       	ldi	r27, 0x3F	; 63
    1dca:	8f a3       	std	Y+39, r24	; 0x27
    1dcc:	98 a7       	std	Y+40, r25	; 0x28
    1dce:	a9 a7       	std	Y+41, r26	; 0x29
    1dd0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dd2:	6f a1       	ldd	r22, Y+39	; 0x27
    1dd4:	78 a5       	ldd	r23, Y+40	; 0x28
    1dd6:	89 a5       	ldd	r24, Y+41	; 0x29
    1dd8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dda:	20 e0       	ldi	r18, 0x00	; 0
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	4a ef       	ldi	r20, 0xFA	; 250
    1de0:	54 e4       	ldi	r21, 0x44	; 68
    1de2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de6:	dc 01       	movw	r26, r24
    1de8:	cb 01       	movw	r24, r22
    1dea:	8b a3       	std	Y+35, r24	; 0x23
    1dec:	9c a3       	std	Y+36, r25	; 0x24
    1dee:	ad a3       	std	Y+37, r26	; 0x25
    1df0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1df2:	6b a1       	ldd	r22, Y+35	; 0x23
    1df4:	7c a1       	ldd	r23, Y+36	; 0x24
    1df6:	8d a1       	ldd	r24, Y+37	; 0x25
    1df8:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfa:	20 e0       	ldi	r18, 0x00	; 0
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	40 e8       	ldi	r20, 0x80	; 128
    1e00:	5f e3       	ldi	r21, 0x3F	; 63
    1e02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e06:	88 23       	and	r24, r24
    1e08:	2c f4       	brge	.+10     	; 0x1e14 <HLCD_VoidInit+0x176>
		__ticks = 1;
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9a a3       	std	Y+34, r25	; 0x22
    1e10:	89 a3       	std	Y+33, r24	; 0x21
    1e12:	3f c0       	rjmp	.+126    	; 0x1e92 <HLCD_VoidInit+0x1f4>
	else if (__tmp > 65535)
    1e14:	6b a1       	ldd	r22, Y+35	; 0x23
    1e16:	7c a1       	ldd	r23, Y+36	; 0x24
    1e18:	8d a1       	ldd	r24, Y+37	; 0x25
    1e1a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e1c:	20 e0       	ldi	r18, 0x00	; 0
    1e1e:	3f ef       	ldi	r19, 0xFF	; 255
    1e20:	4f e7       	ldi	r20, 0x7F	; 127
    1e22:	57 e4       	ldi	r21, 0x47	; 71
    1e24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e28:	18 16       	cp	r1, r24
    1e2a:	4c f5       	brge	.+82     	; 0x1e7e <HLCD_VoidInit+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e2c:	6f a1       	ldd	r22, Y+39	; 0x27
    1e2e:	78 a5       	ldd	r23, Y+40	; 0x28
    1e30:	89 a5       	ldd	r24, Y+41	; 0x29
    1e32:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e34:	20 e0       	ldi	r18, 0x00	; 0
    1e36:	30 e0       	ldi	r19, 0x00	; 0
    1e38:	40 e2       	ldi	r20, 0x20	; 32
    1e3a:	51 e4       	ldi	r21, 0x41	; 65
    1e3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e40:	dc 01       	movw	r26, r24
    1e42:	cb 01       	movw	r24, r22
    1e44:	bc 01       	movw	r22, r24
    1e46:	cd 01       	movw	r24, r26
    1e48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e4c:	dc 01       	movw	r26, r24
    1e4e:	cb 01       	movw	r24, r22
    1e50:	9a a3       	std	Y+34, r25	; 0x22
    1e52:	89 a3       	std	Y+33, r24	; 0x21
    1e54:	0f c0       	rjmp	.+30     	; 0x1e74 <HLCD_VoidInit+0x1d6>
    1e56:	88 ec       	ldi	r24, 0xC8	; 200
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	98 a3       	std	Y+32, r25	; 0x20
    1e5c:	8f 8f       	std	Y+31, r24	; 0x1f
    1e5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1e60:	98 a1       	ldd	r25, Y+32	; 0x20
    1e62:	01 97       	sbiw	r24, 0x01	; 1
    1e64:	f1 f7       	brne	.-4      	; 0x1e62 <HLCD_VoidInit+0x1c4>
    1e66:	98 a3       	std	Y+32, r25	; 0x20
    1e68:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e6a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e6c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e6e:	01 97       	sbiw	r24, 0x01	; 1
    1e70:	9a a3       	std	Y+34, r25	; 0x22
    1e72:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e74:	89 a1       	ldd	r24, Y+33	; 0x21
    1e76:	9a a1       	ldd	r25, Y+34	; 0x22
    1e78:	00 97       	sbiw	r24, 0x00	; 0
    1e7a:	69 f7       	brne	.-38     	; 0x1e56 <HLCD_VoidInit+0x1b8>
    1e7c:	14 c0       	rjmp	.+40     	; 0x1ea6 <HLCD_VoidInit+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7e:	6b a1       	ldd	r22, Y+35	; 0x23
    1e80:	7c a1       	ldd	r23, Y+36	; 0x24
    1e82:	8d a1       	ldd	r24, Y+37	; 0x25
    1e84:	9e a1       	ldd	r25, Y+38	; 0x26
    1e86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e8a:	dc 01       	movw	r26, r24
    1e8c:	cb 01       	movw	r24, r22
    1e8e:	9a a3       	std	Y+34, r25	; 0x22
    1e90:	89 a3       	std	Y+33, r24	; 0x21
    1e92:	89 a1       	ldd	r24, Y+33	; 0x21
    1e94:	9a a1       	ldd	r25, Y+34	; 0x22
    1e96:	9e 8f       	std	Y+30, r25	; 0x1e
    1e98:	8d 8f       	std	Y+29, r24	; 0x1d
    1e9a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e9c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e9e:	01 97       	sbiw	r24, 0x01	; 1
    1ea0:	f1 f7       	brne	.-4      	; 0x1e9e <HLCD_VoidInit+0x200>
    1ea2:	9e 8f       	std	Y+30, r25	; 0x1e
    1ea4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);

	/* Display on/off control*/
	HLCD_VoidSendCommand(DISPLAYON);
    1ea6:	8f e0       	ldi	r24, 0x0F	; 15
    1ea8:	0e 94 59 11 	call	0x22b2	; 0x22b2 <HLCD_VoidSendCommand>
    1eac:	80 e0       	ldi	r24, 0x00	; 0
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	a0 e8       	ldi	r26, 0x80	; 128
    1eb2:	bf e3       	ldi	r27, 0x3F	; 63
    1eb4:	89 8f       	std	Y+25, r24	; 0x19
    1eb6:	9a 8f       	std	Y+26, r25	; 0x1a
    1eb8:	ab 8f       	std	Y+27, r26	; 0x1b
    1eba:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ebc:	69 8d       	ldd	r22, Y+25	; 0x19
    1ebe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ec0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ec2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ec4:	20 e0       	ldi	r18, 0x00	; 0
    1ec6:	30 e0       	ldi	r19, 0x00	; 0
    1ec8:	4a ef       	ldi	r20, 0xFA	; 250
    1eca:	54 e4       	ldi	r21, 0x44	; 68
    1ecc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed0:	dc 01       	movw	r26, r24
    1ed2:	cb 01       	movw	r24, r22
    1ed4:	8d 8b       	std	Y+21, r24	; 0x15
    1ed6:	9e 8b       	std	Y+22, r25	; 0x16
    1ed8:	af 8b       	std	Y+23, r26	; 0x17
    1eda:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1edc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ede:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	30 e0       	ldi	r19, 0x00	; 0
    1ee8:	40 e8       	ldi	r20, 0x80	; 128
    1eea:	5f e3       	ldi	r21, 0x3F	; 63
    1eec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ef0:	88 23       	and	r24, r24
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <HLCD_VoidInit+0x260>
		__ticks = 1;
    1ef4:	81 e0       	ldi	r24, 0x01	; 1
    1ef6:	90 e0       	ldi	r25, 0x00	; 0
    1ef8:	9c 8b       	std	Y+20, r25	; 0x14
    1efa:	8b 8b       	std	Y+19, r24	; 0x13
    1efc:	3f c0       	rjmp	.+126    	; 0x1f7c <HLCD_VoidInit+0x2de>
	else if (__tmp > 65535)
    1efe:	6d 89       	ldd	r22, Y+21	; 0x15
    1f00:	7e 89       	ldd	r23, Y+22	; 0x16
    1f02:	8f 89       	ldd	r24, Y+23	; 0x17
    1f04:	98 8d       	ldd	r25, Y+24	; 0x18
    1f06:	20 e0       	ldi	r18, 0x00	; 0
    1f08:	3f ef       	ldi	r19, 0xFF	; 255
    1f0a:	4f e7       	ldi	r20, 0x7F	; 127
    1f0c:	57 e4       	ldi	r21, 0x47	; 71
    1f0e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f12:	18 16       	cp	r1, r24
    1f14:	4c f5       	brge	.+82     	; 0x1f68 <HLCD_VoidInit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f16:	69 8d       	ldd	r22, Y+25	; 0x19
    1f18:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e2       	ldi	r20, 0x20	; 32
    1f24:	51 e4       	ldi	r21, 0x41	; 65
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	bc 01       	movw	r22, r24
    1f30:	cd 01       	movw	r24, r26
    1f32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f36:	dc 01       	movw	r26, r24
    1f38:	cb 01       	movw	r24, r22
    1f3a:	9c 8b       	std	Y+20, r25	; 0x14
    1f3c:	8b 8b       	std	Y+19, r24	; 0x13
    1f3e:	0f c0       	rjmp	.+30     	; 0x1f5e <HLCD_VoidInit+0x2c0>
    1f40:	88 ec       	ldi	r24, 0xC8	; 200
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	9a 8b       	std	Y+18, r25	; 0x12
    1f46:	89 8b       	std	Y+17, r24	; 0x11
    1f48:	89 89       	ldd	r24, Y+17	; 0x11
    1f4a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f4c:	01 97       	sbiw	r24, 0x01	; 1
    1f4e:	f1 f7       	brne	.-4      	; 0x1f4c <HLCD_VoidInit+0x2ae>
    1f50:	9a 8b       	std	Y+18, r25	; 0x12
    1f52:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	8b 89       	ldd	r24, Y+19	; 0x13
    1f56:	9c 89       	ldd	r25, Y+20	; 0x14
    1f58:	01 97       	sbiw	r24, 0x01	; 1
    1f5a:	9c 8b       	std	Y+20, r25	; 0x14
    1f5c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f60:	9c 89       	ldd	r25, Y+20	; 0x14
    1f62:	00 97       	sbiw	r24, 0x00	; 0
    1f64:	69 f7       	brne	.-38     	; 0x1f40 <HLCD_VoidInit+0x2a2>
    1f66:	14 c0       	rjmp	.+40     	; 0x1f90 <HLCD_VoidInit+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f68:	6d 89       	ldd	r22, Y+21	; 0x15
    1f6a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f6c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f6e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	9c 8b       	std	Y+20, r25	; 0x14
    1f7a:	8b 8b       	std	Y+19, r24	; 0x13
    1f7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1f7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1f80:	98 8b       	std	Y+16, r25	; 0x10
    1f82:	8f 87       	std	Y+15, r24	; 0x0f
    1f84:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f86:	98 89       	ldd	r25, Y+16	; 0x10
    1f88:	01 97       	sbiw	r24, 0x01	; 1
    1f8a:	f1 f7       	brne	.-4      	; 0x1f88 <HLCD_VoidInit+0x2ea>
    1f8c:	98 8b       	std	Y+16, r25	; 0x10
    1f8e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);

	/* display Clear*/
	HLCD_VoidSendCommand(DISPLAYCLEAR);
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	0e 94 59 11 	call	0x22b2	; 0x22b2 <HLCD_VoidSendCommand>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e0       	ldi	r26, 0x00	; 0
    1f9c:	b0 e4       	ldi	r27, 0x40	; 64
    1f9e:	8b 87       	std	Y+11, r24	; 0x0b
    1fa0:	9c 87       	std	Y+12, r25	; 0x0c
    1fa2:	ad 87       	std	Y+13, r26	; 0x0d
    1fa4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fa8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1faa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4a ef       	ldi	r20, 0xFA	; 250
    1fb4:	54 e4       	ldi	r21, 0x44	; 68
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	8f 83       	std	Y+7, r24	; 0x07
    1fc0:	98 87       	std	Y+8, r25	; 0x08
    1fc2:	a9 87       	std	Y+9, r26	; 0x09
    1fc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1fc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1fc8:	78 85       	ldd	r23, Y+8	; 0x08
    1fca:	89 85       	ldd	r24, Y+9	; 0x09
    1fcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <HLCD_VoidInit+0x34a>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9e 83       	std	Y+6, r25	; 0x06
    1fe4:	8d 83       	std	Y+5, r24	; 0x05
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <HLCD_VoidInit+0x3c8>
	else if (__tmp > 65535)
    1fe8:	6f 81       	ldd	r22, Y+7	; 0x07
    1fea:	78 85       	ldd	r23, Y+8	; 0x08
    1fec:	89 85       	ldd	r24, Y+9	; 0x09
    1fee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	4c f5       	brge	.+82     	; 0x2052 <HLCD_VoidInit+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2000:	6b 85       	ldd	r22, Y+11	; 0x0b
    2002:	7c 85       	ldd	r23, Y+12	; 0x0c
    2004:	8d 85       	ldd	r24, Y+13	; 0x0d
    2006:	9e 85       	ldd	r25, Y+14	; 0x0e
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e2       	ldi	r20, 0x20	; 32
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9e 83       	std	Y+6, r25	; 0x06
    2026:	8d 83       	std	Y+5, r24	; 0x05
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <HLCD_VoidInit+0x3aa>
    202a:	88 ec       	ldi	r24, 0xC8	; 200
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9c 83       	std	Y+4, r25	; 0x04
    2030:	8b 83       	std	Y+3, r24	; 0x03
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <HLCD_VoidInit+0x398>
    203a:	9c 83       	std	Y+4, r25	; 0x04
    203c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	8d 81       	ldd	r24, Y+5	; 0x05
    2040:	9e 81       	ldd	r25, Y+6	; 0x06
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	9e 83       	std	Y+6, r25	; 0x06
    2046:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	9e 81       	ldd	r25, Y+6	; 0x06
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	69 f7       	brne	.-38     	; 0x202a <HLCD_VoidInit+0x38c>
    2050:	14 c0       	rjmp	.+40     	; 0x207a <HLCD_VoidInit+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2052:	6f 81       	ldd	r22, Y+7	; 0x07
    2054:	78 85       	ldd	r23, Y+8	; 0x08
    2056:	89 85       	ldd	r24, Y+9	; 0x09
    2058:	9a 85       	ldd	r25, Y+10	; 0x0a
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9e 83       	std	Y+6, r25	; 0x06
    2064:	8d 83       	std	Y+5, r24	; 0x05
    2066:	8d 81       	ldd	r24, Y+5	; 0x05
    2068:	9e 81       	ldd	r25, Y+6	; 0x06
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <HLCD_VoidInit+0x3d4>
    2076:	9a 83       	std	Y+2, r25	; 0x02
    2078:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	/* return to home*/
	HLCD_VoidSendCommand(0b00000010);
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	0e 94 59 11 	call	0x22b2	; 0x22b2 <HLCD_VoidSendCommand>
}
    2080:	e8 96       	adiw	r28, 0x38	; 56
    2082:	0f b6       	in	r0, 0x3f	; 63
    2084:	f8 94       	cli
    2086:	de bf       	out	0x3e, r29	; 62
    2088:	0f be       	out	0x3f, r0	; 63
    208a:	cd bf       	out	0x3d, r28	; 61
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <HLCD_VoidSendChar>:


void HLCD_VoidSendChar(u8 copy_u8char)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	6d 97       	sbiw	r28, 0x1d	; 29
    209c:	0f b6       	in	r0, 0x3f	; 63
    209e:	f8 94       	cli
    20a0:	de bf       	out	0x3e, r29	; 62
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	cd bf       	out	0x3d, r28	; 61
    20a6:	8d 8f       	std	Y+29, r24	; 0x1d
	/*     RS=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_HIGH);
    20a8:	83 e0       	ldi	r24, 0x03	; 3
    20aa:	60 e0       	ldi	r22, 0x00	; 0
    20ac:	41 e0       	ldi	r20, 0x01	; 1
    20ae:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
	/*     RW=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_LOW);
    20b2:	83 e0       	ldi	r24, 0x03	; 3
    20b4:	61 e0       	ldi	r22, 0x01	; 1
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>

	/*     Data   */
	DIO_u8SetPortValue(HLCD_U8_DATA_PORT,copy_u8char);
    20bc:	82 e0       	ldi	r24, 0x02	; 2
    20be:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20c0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <DIO_u8SetPortValue>

	/*     EN=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_HIGH);
    20c4:	83 e0       	ldi	r24, 0x03	; 3
    20c6:	62 e0       	ldi	r22, 0x02	; 2
    20c8:	41 e0       	ldi	r20, 0x01	; 1
    20ca:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	a0 e0       	ldi	r26, 0x00	; 0
    20d4:	b0 e4       	ldi	r27, 0x40	; 64
    20d6:	89 8f       	std	Y+25, r24	; 0x19
    20d8:	9a 8f       	std	Y+26, r25	; 0x1a
    20da:	ab 8f       	std	Y+27, r26	; 0x1b
    20dc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20de:	69 8d       	ldd	r22, Y+25	; 0x19
    20e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	4a ef       	ldi	r20, 0xFA	; 250
    20ec:	54 e4       	ldi	r21, 0x44	; 68
    20ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	8d 8b       	std	Y+21, r24	; 0x15
    20f8:	9e 8b       	std	Y+22, r25	; 0x16
    20fa:	af 8b       	std	Y+23, r26	; 0x17
    20fc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20fe:	6d 89       	ldd	r22, Y+21	; 0x15
    2100:	7e 89       	ldd	r23, Y+22	; 0x16
    2102:	8f 89       	ldd	r24, Y+23	; 0x17
    2104:	98 8d       	ldd	r25, Y+24	; 0x18
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	5f e3       	ldi	r21, 0x3F	; 63
    210e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2112:	88 23       	and	r24, r24
    2114:	2c f4       	brge	.+10     	; 0x2120 <HLCD_VoidSendChar+0x8e>
		__ticks = 1;
    2116:	81 e0       	ldi	r24, 0x01	; 1
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	9c 8b       	std	Y+20, r25	; 0x14
    211c:	8b 8b       	std	Y+19, r24	; 0x13
    211e:	3f c0       	rjmp	.+126    	; 0x219e <HLCD_VoidSendChar+0x10c>
	else if (__tmp > 65535)
    2120:	6d 89       	ldd	r22, Y+21	; 0x15
    2122:	7e 89       	ldd	r23, Y+22	; 0x16
    2124:	8f 89       	ldd	r24, Y+23	; 0x17
    2126:	98 8d       	ldd	r25, Y+24	; 0x18
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	3f ef       	ldi	r19, 0xFF	; 255
    212c:	4f e7       	ldi	r20, 0x7F	; 127
    212e:	57 e4       	ldi	r21, 0x47	; 71
    2130:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2134:	18 16       	cp	r1, r24
    2136:	4c f5       	brge	.+82     	; 0x218a <HLCD_VoidSendChar+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2138:	69 8d       	ldd	r22, Y+25	; 0x19
    213a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    213c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    213e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2140:	20 e0       	ldi	r18, 0x00	; 0
    2142:	30 e0       	ldi	r19, 0x00	; 0
    2144:	40 e2       	ldi	r20, 0x20	; 32
    2146:	51 e4       	ldi	r21, 0x41	; 65
    2148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	bc 01       	movw	r22, r24
    2152:	cd 01       	movw	r24, r26
    2154:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2158:	dc 01       	movw	r26, r24
    215a:	cb 01       	movw	r24, r22
    215c:	9c 8b       	std	Y+20, r25	; 0x14
    215e:	8b 8b       	std	Y+19, r24	; 0x13
    2160:	0f c0       	rjmp	.+30     	; 0x2180 <HLCD_VoidSendChar+0xee>
    2162:	88 ec       	ldi	r24, 0xC8	; 200
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	9a 8b       	std	Y+18, r25	; 0x12
    2168:	89 8b       	std	Y+17, r24	; 0x11
    216a:	89 89       	ldd	r24, Y+17	; 0x11
    216c:	9a 89       	ldd	r25, Y+18	; 0x12
    216e:	01 97       	sbiw	r24, 0x01	; 1
    2170:	f1 f7       	brne	.-4      	; 0x216e <HLCD_VoidSendChar+0xdc>
    2172:	9a 8b       	std	Y+18, r25	; 0x12
    2174:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2176:	8b 89       	ldd	r24, Y+19	; 0x13
    2178:	9c 89       	ldd	r25, Y+20	; 0x14
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	9c 8b       	std	Y+20, r25	; 0x14
    217e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2180:	8b 89       	ldd	r24, Y+19	; 0x13
    2182:	9c 89       	ldd	r25, Y+20	; 0x14
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	69 f7       	brne	.-38     	; 0x2162 <HLCD_VoidSendChar+0xd0>
    2188:	14 c0       	rjmp	.+40     	; 0x21b2 <HLCD_VoidSendChar+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    218a:	6d 89       	ldd	r22, Y+21	; 0x15
    218c:	7e 89       	ldd	r23, Y+22	; 0x16
    218e:	8f 89       	ldd	r24, Y+23	; 0x17
    2190:	98 8d       	ldd	r25, Y+24	; 0x18
    2192:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	9c 8b       	std	Y+20, r25	; 0x14
    219c:	8b 8b       	std	Y+19, r24	; 0x13
    219e:	8b 89       	ldd	r24, Y+19	; 0x13
    21a0:	9c 89       	ldd	r25, Y+20	; 0x14
    21a2:	98 8b       	std	Y+16, r25	; 0x10
    21a4:	8f 87       	std	Y+15, r24	; 0x0f
    21a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    21a8:	98 89       	ldd	r25, Y+16	; 0x10
    21aa:	01 97       	sbiw	r24, 0x01	; 1
    21ac:	f1 f7       	brne	.-4      	; 0x21aa <HLCD_VoidSendChar+0x118>
    21ae:	98 8b       	std	Y+16, r25	; 0x10
    21b0:	8f 87       	std	Y+15, r24	; 0x0f
	/*       delay 2ms  */
	_delay_ms(2);
	/*     EN=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_LOW);
    21b2:	83 e0       	ldi	r24, 0x03	; 3
    21b4:	62 e0       	ldi	r22, 0x02	; 2
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
    21bc:	80 e0       	ldi	r24, 0x00	; 0
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	a0 e0       	ldi	r26, 0x00	; 0
    21c2:	b0 e4       	ldi	r27, 0x40	; 64
    21c4:	8b 87       	std	Y+11, r24	; 0x0b
    21c6:	9c 87       	std	Y+12, r25	; 0x0c
    21c8:	ad 87       	std	Y+13, r26	; 0x0d
    21ca:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    21d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21d4:	20 e0       	ldi	r18, 0x00	; 0
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	4a ef       	ldi	r20, 0xFA	; 250
    21da:	54 e4       	ldi	r21, 0x44	; 68
    21dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	8f 83       	std	Y+7, r24	; 0x07
    21e6:	98 87       	std	Y+8, r25	; 0x08
    21e8:	a9 87       	std	Y+9, r26	; 0x09
    21ea:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21ec:	6f 81       	ldd	r22, Y+7	; 0x07
    21ee:	78 85       	ldd	r23, Y+8	; 0x08
    21f0:	89 85       	ldd	r24, Y+9	; 0x09
    21f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	30 e0       	ldi	r19, 0x00	; 0
    21f8:	40 e8       	ldi	r20, 0x80	; 128
    21fa:	5f e3       	ldi	r21, 0x3F	; 63
    21fc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2200:	88 23       	and	r24, r24
    2202:	2c f4       	brge	.+10     	; 0x220e <HLCD_VoidSendChar+0x17c>
		__ticks = 1;
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	3f c0       	rjmp	.+126    	; 0x228c <HLCD_VoidSendChar+0x1fa>
	else if (__tmp > 65535)
    220e:	6f 81       	ldd	r22, Y+7	; 0x07
    2210:	78 85       	ldd	r23, Y+8	; 0x08
    2212:	89 85       	ldd	r24, Y+9	; 0x09
    2214:	9a 85       	ldd	r25, Y+10	; 0x0a
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	3f ef       	ldi	r19, 0xFF	; 255
    221a:	4f e7       	ldi	r20, 0x7F	; 127
    221c:	57 e4       	ldi	r21, 0x47	; 71
    221e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2222:	18 16       	cp	r1, r24
    2224:	4c f5       	brge	.+82     	; 0x2278 <HLCD_VoidSendChar+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2226:	6b 85       	ldd	r22, Y+11	; 0x0b
    2228:	7c 85       	ldd	r23, Y+12	; 0x0c
    222a:	8d 85       	ldd	r24, Y+13	; 0x0d
    222c:	9e 85       	ldd	r25, Y+14	; 0x0e
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e2       	ldi	r20, 0x20	; 32
    2234:	51 e4       	ldi	r21, 0x41	; 65
    2236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	bc 01       	movw	r22, r24
    2240:	cd 01       	movw	r24, r26
    2242:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2246:	dc 01       	movw	r26, r24
    2248:	cb 01       	movw	r24, r22
    224a:	9e 83       	std	Y+6, r25	; 0x06
    224c:	8d 83       	std	Y+5, r24	; 0x05
    224e:	0f c0       	rjmp	.+30     	; 0x226e <HLCD_VoidSendChar+0x1dc>
    2250:	88 ec       	ldi	r24, 0xC8	; 200
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	9c 83       	std	Y+4, r25	; 0x04
    2256:	8b 83       	std	Y+3, r24	; 0x03
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	f1 f7       	brne	.-4      	; 0x225c <HLCD_VoidSendChar+0x1ca>
    2260:	9c 83       	std	Y+4, r25	; 0x04
    2262:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2264:	8d 81       	ldd	r24, Y+5	; 0x05
    2266:	9e 81       	ldd	r25, Y+6	; 0x06
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	9e 83       	std	Y+6, r25	; 0x06
    226c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    226e:	8d 81       	ldd	r24, Y+5	; 0x05
    2270:	9e 81       	ldd	r25, Y+6	; 0x06
    2272:	00 97       	sbiw	r24, 0x00	; 0
    2274:	69 f7       	brne	.-38     	; 0x2250 <HLCD_VoidSendChar+0x1be>
    2276:	14 c0       	rjmp	.+40     	; 0x22a0 <HLCD_VoidSendChar+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2278:	6f 81       	ldd	r22, Y+7	; 0x07
    227a:	78 85       	ldd	r23, Y+8	; 0x08
    227c:	89 85       	ldd	r24, Y+9	; 0x09
    227e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2280:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2284:	dc 01       	movw	r26, r24
    2286:	cb 01       	movw	r24, r22
    2288:	9e 83       	std	Y+6, r25	; 0x06
    228a:	8d 83       	std	Y+5, r24	; 0x05
    228c:	8d 81       	ldd	r24, Y+5	; 0x05
    228e:	9e 81       	ldd	r25, Y+6	; 0x06
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	89 83       	std	Y+1, r24	; 0x01
    2294:	89 81       	ldd	r24, Y+1	; 0x01
    2296:	9a 81       	ldd	r25, Y+2	; 0x02
    2298:	01 97       	sbiw	r24, 0x01	; 1
    229a:	f1 f7       	brne	.-4      	; 0x2298 <HLCD_VoidSendChar+0x206>
    229c:	9a 83       	std	Y+2, r25	; 0x02
    229e:	89 83       	std	Y+1, r24	; 0x01
	/*       delay 2ms  */
	_delay_ms(2);

}
    22a0:	6d 96       	adiw	r28, 0x1d	; 29
    22a2:	0f b6       	in	r0, 0x3f	; 63
    22a4:	f8 94       	cli
    22a6:	de bf       	out	0x3e, r29	; 62
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	cd bf       	out	0x3d, r28	; 61
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	08 95       	ret

000022b2 <HLCD_VoidSendCommand>:



void HLCD_VoidSendCommand(u8 copy_u8command)

{
    22b2:	df 93       	push	r29
    22b4:	cf 93       	push	r28
    22b6:	cd b7       	in	r28, 0x3d	; 61
    22b8:	de b7       	in	r29, 0x3e	; 62
    22ba:	6d 97       	sbiw	r28, 0x1d	; 29
    22bc:	0f b6       	in	r0, 0x3f	; 63
    22be:	f8 94       	cli
    22c0:	de bf       	out	0x3e, r29	; 62
    22c2:	0f be       	out	0x3f, r0	; 63
    22c4:	cd bf       	out	0x3d, r28	; 61
    22c6:	8d 8f       	std	Y+29, r24	; 0x1d
	/*     RS=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RS_PIN,DIO_u8_PIN_LOW);
    22c8:	83 e0       	ldi	r24, 0x03	; 3
    22ca:	60 e0       	ldi	r22, 0x00	; 0
    22cc:	40 e0       	ldi	r20, 0x00	; 0
    22ce:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
	/*     RW=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_RW_PIN,DIO_u8_PIN_LOW);
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	61 e0       	ldi	r22, 0x01	; 1
    22d6:	40 e0       	ldi	r20, 0x00	; 0
    22d8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>

	/*     Command   */
	DIO_u8SetPortValue(HLCD_U8_DATA_PORT,copy_u8command);
    22dc:	82 e0       	ldi	r24, 0x02	; 2
    22de:	6d 8d       	ldd	r22, Y+29	; 0x1d
    22e0:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <DIO_u8SetPortValue>

	/*     EN=1   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_HIGH);
    22e4:	83 e0       	ldi	r24, 0x03	; 3
    22e6:	62 e0       	ldi	r22, 0x02	; 2
    22e8:	41 e0       	ldi	r20, 0x01	; 1
    22ea:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
    22ee:	80 e0       	ldi	r24, 0x00	; 0
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	a0 e0       	ldi	r26, 0x00	; 0
    22f4:	b0 e4       	ldi	r27, 0x40	; 64
    22f6:	89 8f       	std	Y+25, r24	; 0x19
    22f8:	9a 8f       	std	Y+26, r25	; 0x1a
    22fa:	ab 8f       	std	Y+27, r26	; 0x1b
    22fc:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22fe:	69 8d       	ldd	r22, Y+25	; 0x19
    2300:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2302:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2304:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2306:	20 e0       	ldi	r18, 0x00	; 0
    2308:	30 e0       	ldi	r19, 0x00	; 0
    230a:	4a ef       	ldi	r20, 0xFA	; 250
    230c:	54 e4       	ldi	r21, 0x44	; 68
    230e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	8d 8b       	std	Y+21, r24	; 0x15
    2318:	9e 8b       	std	Y+22, r25	; 0x16
    231a:	af 8b       	std	Y+23, r26	; 0x17
    231c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    231e:	6d 89       	ldd	r22, Y+21	; 0x15
    2320:	7e 89       	ldd	r23, Y+22	; 0x16
    2322:	8f 89       	ldd	r24, Y+23	; 0x17
    2324:	98 8d       	ldd	r25, Y+24	; 0x18
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	30 e0       	ldi	r19, 0x00	; 0
    232a:	40 e8       	ldi	r20, 0x80	; 128
    232c:	5f e3       	ldi	r21, 0x3F	; 63
    232e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2332:	88 23       	and	r24, r24
    2334:	2c f4       	brge	.+10     	; 0x2340 <HLCD_VoidSendCommand+0x8e>
		__ticks = 1;
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9c 8b       	std	Y+20, r25	; 0x14
    233c:	8b 8b       	std	Y+19, r24	; 0x13
    233e:	3f c0       	rjmp	.+126    	; 0x23be <HLCD_VoidSendCommand+0x10c>
	else if (__tmp > 65535)
    2340:	6d 89       	ldd	r22, Y+21	; 0x15
    2342:	7e 89       	ldd	r23, Y+22	; 0x16
    2344:	8f 89       	ldd	r24, Y+23	; 0x17
    2346:	98 8d       	ldd	r25, Y+24	; 0x18
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	3f ef       	ldi	r19, 0xFF	; 255
    234c:	4f e7       	ldi	r20, 0x7F	; 127
    234e:	57 e4       	ldi	r21, 0x47	; 71
    2350:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2354:	18 16       	cp	r1, r24
    2356:	4c f5       	brge	.+82     	; 0x23aa <HLCD_VoidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2358:	69 8d       	ldd	r22, Y+25	; 0x19
    235a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    235c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    235e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2360:	20 e0       	ldi	r18, 0x00	; 0
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	40 e2       	ldi	r20, 0x20	; 32
    2366:	51 e4       	ldi	r21, 0x41	; 65
    2368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    236c:	dc 01       	movw	r26, r24
    236e:	cb 01       	movw	r24, r22
    2370:	bc 01       	movw	r22, r24
    2372:	cd 01       	movw	r24, r26
    2374:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2378:	dc 01       	movw	r26, r24
    237a:	cb 01       	movw	r24, r22
    237c:	9c 8b       	std	Y+20, r25	; 0x14
    237e:	8b 8b       	std	Y+19, r24	; 0x13
    2380:	0f c0       	rjmp	.+30     	; 0x23a0 <HLCD_VoidSendCommand+0xee>
    2382:	88 ec       	ldi	r24, 0xC8	; 200
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	9a 8b       	std	Y+18, r25	; 0x12
    2388:	89 8b       	std	Y+17, r24	; 0x11
    238a:	89 89       	ldd	r24, Y+17	; 0x11
    238c:	9a 89       	ldd	r25, Y+18	; 0x12
    238e:	01 97       	sbiw	r24, 0x01	; 1
    2390:	f1 f7       	brne	.-4      	; 0x238e <HLCD_VoidSendCommand+0xdc>
    2392:	9a 8b       	std	Y+18, r25	; 0x12
    2394:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2396:	8b 89       	ldd	r24, Y+19	; 0x13
    2398:	9c 89       	ldd	r25, Y+20	; 0x14
    239a:	01 97       	sbiw	r24, 0x01	; 1
    239c:	9c 8b       	std	Y+20, r25	; 0x14
    239e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a0:	8b 89       	ldd	r24, Y+19	; 0x13
    23a2:	9c 89       	ldd	r25, Y+20	; 0x14
    23a4:	00 97       	sbiw	r24, 0x00	; 0
    23a6:	69 f7       	brne	.-38     	; 0x2382 <HLCD_VoidSendCommand+0xd0>
    23a8:	14 c0       	rjmp	.+40     	; 0x23d2 <HLCD_VoidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23aa:	6d 89       	ldd	r22, Y+21	; 0x15
    23ac:	7e 89       	ldd	r23, Y+22	; 0x16
    23ae:	8f 89       	ldd	r24, Y+23	; 0x17
    23b0:	98 8d       	ldd	r25, Y+24	; 0x18
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	9c 8b       	std	Y+20, r25	; 0x14
    23bc:	8b 8b       	std	Y+19, r24	; 0x13
    23be:	8b 89       	ldd	r24, Y+19	; 0x13
    23c0:	9c 89       	ldd	r25, Y+20	; 0x14
    23c2:	98 8b       	std	Y+16, r25	; 0x10
    23c4:	8f 87       	std	Y+15, r24	; 0x0f
    23c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    23c8:	98 89       	ldd	r25, Y+16	; 0x10
    23ca:	01 97       	sbiw	r24, 0x01	; 1
    23cc:	f1 f7       	brne	.-4      	; 0x23ca <HLCD_VoidSendCommand+0x118>
    23ce:	98 8b       	std	Y+16, r25	; 0x10
    23d0:	8f 87       	std	Y+15, r24	; 0x0f
	/*     delay 2ms  */
	_delay_ms(2);
	/*     EN=0   */
	DIO_u8SetPinValue(HLCD_U8_CONTROL_PORT,HLCD_U8_EN_PIN,DIO_u8_PIN_LOW);
    23d2:	83 e0       	ldi	r24, 0x03	; 3
    23d4:	62 e0       	ldi	r22, 0x02	; 2
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
    23dc:	80 e0       	ldi	r24, 0x00	; 0
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	a0 e0       	ldi	r26, 0x00	; 0
    23e2:	b0 e4       	ldi	r27, 0x40	; 64
    23e4:	8b 87       	std	Y+11, r24	; 0x0b
    23e6:	9c 87       	std	Y+12, r25	; 0x0c
    23e8:	ad 87       	std	Y+13, r26	; 0x0d
    23ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    23ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    23f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23f4:	20 e0       	ldi	r18, 0x00	; 0
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	4a ef       	ldi	r20, 0xFA	; 250
    23fa:	54 e4       	ldi	r21, 0x44	; 68
    23fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2400:	dc 01       	movw	r26, r24
    2402:	cb 01       	movw	r24, r22
    2404:	8f 83       	std	Y+7, r24	; 0x07
    2406:	98 87       	std	Y+8, r25	; 0x08
    2408:	a9 87       	std	Y+9, r26	; 0x09
    240a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    240c:	6f 81       	ldd	r22, Y+7	; 0x07
    240e:	78 85       	ldd	r23, Y+8	; 0x08
    2410:	89 85       	ldd	r24, Y+9	; 0x09
    2412:	9a 85       	ldd	r25, Y+10	; 0x0a
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	40 e8       	ldi	r20, 0x80	; 128
    241a:	5f e3       	ldi	r21, 0x3F	; 63
    241c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2420:	88 23       	and	r24, r24
    2422:	2c f4       	brge	.+10     	; 0x242e <HLCD_VoidSendCommand+0x17c>
		__ticks = 1;
    2424:	81 e0       	ldi	r24, 0x01	; 1
    2426:	90 e0       	ldi	r25, 0x00	; 0
    2428:	9e 83       	std	Y+6, r25	; 0x06
    242a:	8d 83       	std	Y+5, r24	; 0x05
    242c:	3f c0       	rjmp	.+126    	; 0x24ac <HLCD_VoidSendCommand+0x1fa>
	else if (__tmp > 65535)
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	20 e0       	ldi	r18, 0x00	; 0
    2438:	3f ef       	ldi	r19, 0xFF	; 255
    243a:	4f e7       	ldi	r20, 0x7F	; 127
    243c:	57 e4       	ldi	r21, 0x47	; 71
    243e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2442:	18 16       	cp	r1, r24
    2444:	4c f5       	brge	.+82     	; 0x2498 <HLCD_VoidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2446:	6b 85       	ldd	r22, Y+11	; 0x0b
    2448:	7c 85       	ldd	r23, Y+12	; 0x0c
    244a:	8d 85       	ldd	r24, Y+13	; 0x0d
    244c:	9e 85       	ldd	r25, Y+14	; 0x0e
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	40 e2       	ldi	r20, 0x20	; 32
    2454:	51 e4       	ldi	r21, 0x41	; 65
    2456:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245a:	dc 01       	movw	r26, r24
    245c:	cb 01       	movw	r24, r22
    245e:	bc 01       	movw	r22, r24
    2460:	cd 01       	movw	r24, r26
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9e 83       	std	Y+6, r25	; 0x06
    246c:	8d 83       	std	Y+5, r24	; 0x05
    246e:	0f c0       	rjmp	.+30     	; 0x248e <HLCD_VoidSendCommand+0x1dc>
    2470:	88 ec       	ldi	r24, 0xC8	; 200
    2472:	90 e0       	ldi	r25, 0x00	; 0
    2474:	9c 83       	std	Y+4, r25	; 0x04
    2476:	8b 83       	std	Y+3, r24	; 0x03
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	9c 81       	ldd	r25, Y+4	; 0x04
    247c:	01 97       	sbiw	r24, 0x01	; 1
    247e:	f1 f7       	brne	.-4      	; 0x247c <HLCD_VoidSendCommand+0x1ca>
    2480:	9c 83       	std	Y+4, r25	; 0x04
    2482:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2484:	8d 81       	ldd	r24, Y+5	; 0x05
    2486:	9e 81       	ldd	r25, Y+6	; 0x06
    2488:	01 97       	sbiw	r24, 0x01	; 1
    248a:	9e 83       	std	Y+6, r25	; 0x06
    248c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    248e:	8d 81       	ldd	r24, Y+5	; 0x05
    2490:	9e 81       	ldd	r25, Y+6	; 0x06
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	69 f7       	brne	.-38     	; 0x2470 <HLCD_VoidSendCommand+0x1be>
    2496:	14 c0       	rjmp	.+40     	; 0x24c0 <HLCD_VoidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2498:	6f 81       	ldd	r22, Y+7	; 0x07
    249a:	78 85       	ldd	r23, Y+8	; 0x08
    249c:	89 85       	ldd	r24, Y+9	; 0x09
    249e:	9a 85       	ldd	r25, Y+10	; 0x0a
    24a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24a4:	dc 01       	movw	r26, r24
    24a6:	cb 01       	movw	r24, r22
    24a8:	9e 83       	std	Y+6, r25	; 0x06
    24aa:	8d 83       	std	Y+5, r24	; 0x05
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	9e 81       	ldd	r25, Y+6	; 0x06
    24b0:	9a 83       	std	Y+2, r25	; 0x02
    24b2:	89 83       	std	Y+1, r24	; 0x01
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
    24b6:	9a 81       	ldd	r25, Y+2	; 0x02
    24b8:	01 97       	sbiw	r24, 0x01	; 1
    24ba:	f1 f7       	brne	.-4      	; 0x24b8 <HLCD_VoidSendCommand+0x206>
    24bc:	9a 83       	std	Y+2, r25	; 0x02
    24be:	89 83       	std	Y+1, r24	; 0x01
	/*     delay 2ms  */
	_delay_ms(2);

}
    24c0:	6d 96       	adiw	r28, 0x1d	; 29
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	cf 91       	pop	r28
    24ce:	df 91       	pop	r29
    24d0:	08 95       	ret

000024d2 <HLCD_VoidSendString>:


void HLCD_VoidSendString(u8 copy_u8Char[])
{
    24d2:	df 93       	push	r29
    24d4:	cf 93       	push	r28
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <HLCD_VoidSendString+0x6>
    24d8:	0f 92       	push	r0
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	9b 83       	std	Y+3, r25	; 0x03
    24e0:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    24e2:	19 82       	std	Y+1, r1	; 0x01
    24e4:	0e c0       	rjmp	.+28     	; 0x2502 <HLCD_VoidSendString+0x30>
	while(copy_u8Char[i]!='\0')
	{
		HLCD_VoidSendChar(copy_u8Char[i]);
    24e6:	89 81       	ldd	r24, Y+1	; 0x01
    24e8:	28 2f       	mov	r18, r24
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	8a 81       	ldd	r24, Y+2	; 0x02
    24ee:	9b 81       	ldd	r25, Y+3	; 0x03
    24f0:	fc 01       	movw	r30, r24
    24f2:	e2 0f       	add	r30, r18
    24f4:	f3 1f       	adc	r31, r19
    24f6:	80 81       	ld	r24, Z
    24f8:	0e 94 49 10 	call	0x2092	; 0x2092 <HLCD_VoidSendChar>
		i++;
    24fc:	89 81       	ldd	r24, Y+1	; 0x01
    24fe:	8f 5f       	subi	r24, 0xFF	; 255
    2500:	89 83       	std	Y+1, r24	; 0x01


void HLCD_VoidSendString(u8 copy_u8Char[])
{
	u8 i=0;
	while(copy_u8Char[i]!='\0')
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	28 2f       	mov	r18, r24
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	9b 81       	ldd	r25, Y+3	; 0x03
    250c:	fc 01       	movw	r30, r24
    250e:	e2 0f       	add	r30, r18
    2510:	f3 1f       	adc	r31, r19
    2512:	80 81       	ld	r24, Z
    2514:	88 23       	and	r24, r24
    2516:	39 f7       	brne	.-50     	; 0x24e6 <HLCD_VoidSendString+0x14>
	{
		HLCD_VoidSendChar(copy_u8Char[i]);
		i++;
	}
}
    2518:	0f 90       	pop	r0
    251a:	0f 90       	pop	r0
    251c:	0f 90       	pop	r0
    251e:	cf 91       	pop	r28
    2520:	df 91       	pop	r29
    2522:	08 95       	ret

00002524 <HLCD_VoidSendNumber>:



void HLCD_VoidSendNumber(u32 copy_u8Char)
{
    2524:	df 93       	push	r29
    2526:	cf 93       	push	r28
    2528:	00 d0       	rcall	.+0      	; 0x252a <HLCD_VoidSendNumber+0x6>
    252a:	00 d0       	rcall	.+0      	; 0x252c <HLCD_VoidSendNumber+0x8>
    252c:	cd b7       	in	r28, 0x3d	; 61
    252e:	de b7       	in	r29, 0x3e	; 62
    2530:	9c 83       	std	Y+4, r25	; 0x04
    2532:	8b 83       	std	Y+3, r24	; 0x03
	u32  Local_u8_revers_number = 1;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	9a 83       	std	Y+2, r25	; 0x02
    253a:	89 83       	std	Y+1, r24	; 0x01

	if(copy_u8Char == 0)
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	9c 81       	ldd	r25, Y+4	; 0x04
    2540:	00 97       	sbiw	r24, 0x00	; 0
    2542:	39 f5       	brne	.+78     	; 0x2592 <HLCD_VoidSendNumber+0x6e>
	{
		HLCD_VoidSendChar(copy_u8Char+'0');
    2544:	8b 81       	ldd	r24, Y+3	; 0x03
    2546:	80 5d       	subi	r24, 0xD0	; 208
    2548:	0e 94 49 10 	call	0x2092	; 0x2092 <HLCD_VoidSendChar>
    254c:	22 c0       	rjmp	.+68     	; 0x2592 <HLCD_VoidSendNumber+0x6e>
	}

	while(copy_u8Char > 0)
	{
		Local_u8_revers_number=Local_u8_revers_number*10+copy_u8Char%10;
    254e:	89 81       	ldd	r24, Y+1	; 0x01
    2550:	9a 81       	ldd	r25, Y+2	; 0x02
    2552:	9c 01       	movw	r18, r24
    2554:	22 0f       	add	r18, r18
    2556:	33 1f       	adc	r19, r19
    2558:	c9 01       	movw	r24, r18
    255a:	88 0f       	add	r24, r24
    255c:	99 1f       	adc	r25, r25
    255e:	88 0f       	add	r24, r24
    2560:	99 1f       	adc	r25, r25
    2562:	f9 01       	movw	r30, r18
    2564:	e8 0f       	add	r30, r24
    2566:	f9 1f       	adc	r31, r25
    2568:	8b 81       	ldd	r24, Y+3	; 0x03
    256a:	9c 81       	ldd	r25, Y+4	; 0x04
    256c:	2a e0       	ldi	r18, 0x0A	; 10
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	b9 01       	movw	r22, r18
    2572:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    2576:	8e 0f       	add	r24, r30
    2578:	9f 1f       	adc	r25, r31
    257a:	9a 83       	std	Y+2, r25	; 0x02
    257c:	89 83       	std	Y+1, r24	; 0x01
		copy_u8Char=copy_u8Char/10;
    257e:	8b 81       	ldd	r24, Y+3	; 0x03
    2580:	9c 81       	ldd	r25, Y+4	; 0x04
    2582:	2a e0       	ldi	r18, 0x0A	; 10
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	b9 01       	movw	r22, r18
    2588:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    258c:	cb 01       	movw	r24, r22
    258e:	9c 83       	std	Y+4, r25	; 0x04
    2590:	8b 83       	std	Y+3, r24	; 0x03
	if(copy_u8Char == 0)
	{
		HLCD_VoidSendChar(copy_u8Char+'0');
	}

	while(copy_u8Char > 0)
    2592:	8b 81       	ldd	r24, Y+3	; 0x03
    2594:	9c 81       	ldd	r25, Y+4	; 0x04
    2596:	00 97       	sbiw	r24, 0x00	; 0
    2598:	d1 f6       	brne	.-76     	; 0x254e <HLCD_VoidSendNumber+0x2a>
    259a:	17 c0       	rjmp	.+46     	; 0x25ca <HLCD_VoidSendNumber+0xa6>
		copy_u8Char=copy_u8Char/10;
	}

	while(Local_u8_revers_number>1)
	{
		copy_u8Char=Local_u8_revers_number % 10;
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	2a e0       	ldi	r18, 0x0A	; 10
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	b9 01       	movw	r22, r18
    25a6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    25aa:	9c 83       	std	Y+4, r25	; 0x04
    25ac:	8b 83       	std	Y+3, r24	; 0x03
		Local_u8_revers_number=Local_u8_revers_number/10;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	2a e0       	ldi	r18, 0x0A	; 10
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	b9 01       	movw	r22, r18
    25b8:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <__udivmodhi4>
    25bc:	cb 01       	movw	r24, r22
    25be:	9a 83       	std	Y+2, r25	; 0x02
    25c0:	89 83       	std	Y+1, r24	; 0x01
		HLCD_VoidSendChar(copy_u8Char+'0');
    25c2:	8b 81       	ldd	r24, Y+3	; 0x03
    25c4:	80 5d       	subi	r24, 0xD0	; 208
    25c6:	0e 94 49 10 	call	0x2092	; 0x2092 <HLCD_VoidSendChar>
	{
		Local_u8_revers_number=Local_u8_revers_number*10+copy_u8Char%10;
		copy_u8Char=copy_u8Char/10;
	}

	while(Local_u8_revers_number>1)
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	82 30       	cpi	r24, 0x02	; 2
    25d0:	91 05       	cpc	r25, r1
    25d2:	20 f7       	brcc	.-56     	; 0x259c <HLCD_VoidSendNumber+0x78>

	}



}
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0
    25d8:	0f 90       	pop	r0
    25da:	0f 90       	pop	r0
    25dc:	cf 91       	pop	r28
    25de:	df 91       	pop	r29
    25e0:	08 95       	ret

000025e2 <HLCD_VoidGotoXY>:




void HLCD_VoidGotoXY(u8 copy_U8RowPos ,u8 copy_U8ColPos)
{
    25e2:	df 93       	push	r29
    25e4:	cf 93       	push	r28
    25e6:	00 d0       	rcall	.+0      	; 0x25e8 <HLCD_VoidGotoXY+0x6>
    25e8:	cd b7       	in	r28, 0x3d	; 61
    25ea:	de b7       	in	r29, 0x3e	; 62
    25ec:	89 83       	std	Y+1, r24	; 0x01
    25ee:	6a 83       	std	Y+2, r22	; 0x02
	if(copy_U8RowPos ==0)
    25f0:	89 81       	ldd	r24, Y+1	; 0x01
    25f2:	88 23       	and	r24, r24
    25f4:	29 f4       	brne	.+10     	; 0x2600 <HLCD_VoidGotoXY+0x1e>
	{
		HLCD_VoidSendCommand(copy_U8ColPos+128);
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	80 58       	subi	r24, 0x80	; 128
    25fa:	0e 94 59 11 	call	0x22b2	; 0x22b2 <HLCD_VoidSendCommand>
    25fe:	07 c0       	rjmp	.+14     	; 0x260e <HLCD_VoidGotoXY+0x2c>

	}
	else if(copy_U8RowPos ==1)
    2600:	89 81       	ldd	r24, Y+1	; 0x01
    2602:	81 30       	cpi	r24, 0x01	; 1
    2604:	21 f4       	brne	.+8      	; 0x260e <HLCD_VoidGotoXY+0x2c>
	{
		HLCD_VoidSendCommand(copy_U8ColPos+128+64);
    2606:	8a 81       	ldd	r24, Y+2	; 0x02
    2608:	80 54       	subi	r24, 0x40	; 64
    260a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <HLCD_VoidSendCommand>

	}

}
    260e:	0f 90       	pop	r0
    2610:	0f 90       	pop	r0
    2612:	cf 91       	pop	r28
    2614:	df 91       	pop	r29
    2616:	08 95       	ret

00002618 <HLCD_VoidDraw>:




void HLCD_VoidDraw(u8 *copy_u8char, u8 copy_u8Location,u8 copy_u8Xpos ,u8 copy_u8Ypos)
{
    2618:	df 93       	push	r29
    261a:	cf 93       	push	r28
    261c:	00 d0       	rcall	.+0      	; 0x261e <HLCD_VoidDraw+0x6>
    261e:	00 d0       	rcall	.+0      	; 0x2620 <HLCD_VoidDraw+0x8>
    2620:	00 d0       	rcall	.+0      	; 0x2622 <HLCD_VoidDraw+0xa>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	9b 83       	std	Y+3, r25	; 0x03
    2628:	8a 83       	std	Y+2, r24	; 0x02
    262a:	6c 83       	std	Y+4, r22	; 0x04
    262c:	4d 83       	std	Y+5, r20	; 0x05
    262e:	2e 83       	std	Y+6, r18	; 0x06
	u8 i=0;
    2630:	19 82       	std	Y+1, r1	; 0x01
	HLCD_VoidSendCommand(64+8*(copy_u8Location));//address 0 of  location 0 of CG_Ram
    2632:	8c 81       	ldd	r24, Y+4	; 0x04
    2634:	88 2f       	mov	r24, r24
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	08 96       	adiw	r24, 0x08	; 8
    263a:	88 0f       	add	r24, r24
    263c:	99 1f       	adc	r25, r25
    263e:	88 0f       	add	r24, r24
    2640:	99 1f       	adc	r25, r25
    2642:	88 0f       	add	r24, r24
    2644:	99 1f       	adc	r25, r25
    2646:	0e 94 59 11 	call	0x22b2	; 0x22b2 <HLCD_VoidSendCommand>
	for(i=0;i<8;i++)
    264a:	19 82       	std	Y+1, r1	; 0x01
    264c:	0e c0       	rjmp	.+28     	; 0x266a <HLCD_VoidDraw+0x52>
	{
		HLCD_VoidSendChar(copy_u8char[i]);
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	28 2f       	mov	r18, r24
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	8a 81       	ldd	r24, Y+2	; 0x02
    2656:	9b 81       	ldd	r25, Y+3	; 0x03
    2658:	fc 01       	movw	r30, r24
    265a:	e2 0f       	add	r30, r18
    265c:	f3 1f       	adc	r31, r19
    265e:	80 81       	ld	r24, Z
    2660:	0e 94 49 10 	call	0x2092	; 0x2092 <HLCD_VoidSendChar>

void HLCD_VoidDraw(u8 *copy_u8char, u8 copy_u8Location,u8 copy_u8Xpos ,u8 copy_u8Ypos)
{
	u8 i=0;
	HLCD_VoidSendCommand(64+8*(copy_u8Location));//address 0 of  location 0 of CG_Ram
	for(i=0;i<8;i++)
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	8f 5f       	subi	r24, 0xFF	; 255
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	88 30       	cpi	r24, 0x08	; 8
    266e:	78 f3       	brcs	.-34     	; 0x264e <HLCD_VoidDraw+0x36>
	{
		HLCD_VoidSendChar(copy_u8char[i]);

	}
	HLCD_VoidSendCommand(0b10000000);//address 0 of DD_Ram
    2670:	80 e8       	ldi	r24, 0x80	; 128
    2672:	0e 94 59 11 	call	0x22b2	; 0x22b2 <HLCD_VoidSendCommand>
	HLCD_VoidGotoXY(copy_u8Xpos,copy_u8Ypos);
    2676:	8d 81       	ldd	r24, Y+5	; 0x05
    2678:	6e 81       	ldd	r22, Y+6	; 0x06
    267a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HLCD_VoidGotoXY>
	HLCD_VoidSendChar(copy_u8Location); //address location 0 of CG_Ram
    267e:	8c 81       	ldd	r24, Y+4	; 0x04
    2680:	0e 94 49 10 	call	0x2092	; 0x2092 <HLCD_VoidSendChar>

}
    2684:	26 96       	adiw	r28, 0x06	; 6
    2686:	0f b6       	in	r0, 0x3f	; 63
    2688:	f8 94       	cli
    268a:	de bf       	out	0x3e, r29	; 62
    268c:	0f be       	out	0x3f, r0	; 63
    268e:	cd bf       	out	0x3d, r28	; 61
    2690:	cf 91       	pop	r28
    2692:	df 91       	pop	r29
    2694:	08 95       	ret

00002696 <KPD_u8GetPressedKey>:
#include "KPD_Interface.h"
#include "KPD_Config.h"
#include "KPD_Private.h"

u8 KPD_u8GetPressedKey(void)
{
    2696:	df 93       	push	r29
    2698:	cf 93       	push	r28
    269a:	00 d0       	rcall	.+0      	; 0x269c <KPD_u8GetPressedKey+0x6>
    269c:	00 d0       	rcall	.+0      	; 0x269e <KPD_u8GetPressedKey+0x8>
    269e:	0f 92       	push	r0
    26a0:	cd b7       	in	r28, 0x3d	; 61
    26a2:	de b7       	in	r29, 0x3e	; 62
	u8 Local_u8PressedKey=KPD_NO_PRESSED_KEY;
    26a4:	8f ef       	ldi	r24, 0xFF	; 255
    26a6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8ColumnIndex,Local_u8RowIndex;
	u8 Local_u8PinSate;

	DIO_u8SetPinDirection(KPD_PORT,KPD_COL0_PIN,DIO_u8_PIN_OUTPUT);
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	60 e0       	ldi	r22, 0x00	; 0
    26ac:	41 e0       	ldi	r20, 0x01	; 1
    26ae:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COL1_PIN,DIO_u8_PIN_OUTPUT);
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	61 e0       	ldi	r22, 0x01	; 1
    26b6:	41 e0       	ldi	r20, 0x01	; 1
    26b8:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COL2_PIN,DIO_u8_PIN_OUTPUT);
    26bc:	81 e0       	ldi	r24, 0x01	; 1
    26be:	62 e0       	ldi	r22, 0x02	; 2
    26c0:	41 e0       	ldi	r20, 0x01	; 1
    26c2:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_COL3_PIN,DIO_u8_PIN_OUTPUT);
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	63 e0       	ldi	r22, 0x03	; 3
    26ca:	41 e0       	ldi	r20, 0x01	; 1
    26cc:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>

	DIO_u8SetPinValue(KPD_PORT,KPD_COL0_PIN,DIO_u8_PIN_HIGH);
    26d0:	81 e0       	ldi	r24, 0x01	; 1
    26d2:	60 e0       	ldi	r22, 0x00	; 0
    26d4:	41 e0       	ldi	r20, 0x01	; 1
    26d6:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COL1_PIN,DIO_u8_PIN_HIGH);
    26da:	81 e0       	ldi	r24, 0x01	; 1
    26dc:	61 e0       	ldi	r22, 0x01	; 1
    26de:	41 e0       	ldi	r20, 0x01	; 1
    26e0:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COL2_PIN,DIO_u8_PIN_HIGH);
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	62 e0       	ldi	r22, 0x02	; 2
    26e8:	41 e0       	ldi	r20, 0x01	; 1
    26ea:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_COL3_PIN,DIO_u8_PIN_HIGH);
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	63 e0       	ldi	r22, 0x03	; 3
    26f2:	41 e0       	ldi	r20, 0x01	; 1
    26f4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>

	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW0_PIN,DIO_u8_PIN_LOW);
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	64 e0       	ldi	r22, 0x04	; 4
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW1_PIN,DIO_u8_PIN_LOW);
    2702:	81 e0       	ldi	r24, 0x01	; 1
    2704:	65 e0       	ldi	r22, 0x05	; 5
    2706:	40 e0       	ldi	r20, 0x00	; 0
    2708:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW2_PIN,DIO_u8_PIN_LOW);
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	66 e0       	ldi	r22, 0x06	; 6
    2710:	40 e0       	ldi	r20, 0x00	; 0
    2712:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>
	DIO_u8SetPinDirection(KPD_PORT,KPD_ROW3_PIN,DIO_u8_PIN_LOW);
    2716:	81 e0       	ldi	r24, 0x01	; 1
    2718:	67 e0       	ldi	r22, 0x07	; 7
    271a:	40 e0       	ldi	r20, 0x00	; 0
    271c:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>

	/*Activate Pull up */
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW0_PIN,DIO_u8_PIN_HIGH);
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	64 e0       	ldi	r22, 0x04	; 4
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW1_PIN,DIO_u8_PIN_HIGH);
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	65 e0       	ldi	r22, 0x05	; 5
    272e:	41 e0       	ldi	r20, 0x01	; 1
    2730:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW2_PIN,DIO_u8_PIN_HIGH);
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	66 e0       	ldi	r22, 0x06	; 6
    2738:	41 e0       	ldi	r20, 0x01	; 1
    273a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>
	DIO_u8SetPinValue(KPD_PORT,KPD_ROW3_PIN,DIO_u8_PIN_HIGH);
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	67 e0       	ldi	r22, 0x07	; 7
    2742:	41 e0       	ldi	r20, 0x01	; 1
    2744:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>

	static u8 Local_u8KPDColArr[COLUMN_NUM]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};

	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUM;Local_u8ColumnIndex++)
    2748:	1a 82       	std	Y+2, r1	; 0x02
    274a:	5e c0       	rjmp	.+188    	; 0x2808 <KPD_u8GetPressedKey+0x172>
	{
		/*Activate Current Column*/

		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_LOW);
    274c:	8a 81       	ldd	r24, Y+2	; 0x02
    274e:	88 2f       	mov	r24, r24
    2750:	90 e0       	ldi	r25, 0x00	; 0
    2752:	fc 01       	movw	r30, r24
    2754:	e7 56       	subi	r30, 0x67	; 103
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	90 81       	ld	r25, Z
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	69 2f       	mov	r22, r25
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    2764:	19 82       	std	Y+1, r1	; 0x01
    2766:	3d c0       	rjmp	.+122    	; 0x27e2 <KPD_u8GetPressedKey+0x14c>
		{

			/*Read the current Row*/

			DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinSate);
    2768:	89 81       	ldd	r24, Y+1	; 0x01
    276a:	88 2f       	mov	r24, r24
    276c:	90 e0       	ldi	r25, 0x00	; 0
    276e:	fc 01       	movw	r30, r24
    2770:	eb 56       	subi	r30, 0x6B	; 107
    2772:	ff 4f       	sbci	r31, 0xFF	; 255
    2774:	90 81       	ld	r25, Z
    2776:	9e 01       	movw	r18, r28
    2778:	2c 5f       	subi	r18, 0xFC	; 252
    277a:	3f 4f       	sbci	r19, 0xFF	; 255
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	69 2f       	mov	r22, r25
    2780:	a9 01       	movw	r20, r18
    2782:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_u8GetPinValue>


			/*Check if switch is Pressed*/
			if(DIO_u8_PIN_LOW==Local_u8PinSate)
    2786:	8c 81       	ldd	r24, Y+4	; 0x04
    2788:	88 23       	and	r24, r24
    278a:	41 f5       	brne	.+80     	; 0x27dc <KPD_u8GetPressedKey+0x146>
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	48 2f       	mov	r20, r24
    2790:	50 e0       	ldi	r21, 0x00	; 0
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	28 2f       	mov	r18, r24
    2796:	30 e0       	ldi	r19, 0x00	; 0
    2798:	ca 01       	movw	r24, r20
    279a:	88 0f       	add	r24, r24
    279c:	99 1f       	adc	r25, r25
    279e:	88 0f       	add	r24, r24
    27a0:	99 1f       	adc	r25, r25
    27a2:	82 0f       	add	r24, r18
    27a4:	93 1f       	adc	r25, r19
    27a6:	fc 01       	movw	r30, r24
    27a8:	e3 56       	subi	r30, 0x63	; 99
    27aa:	ff 4f       	sbci	r31, 0xFF	; 255
    27ac:	80 81       	ld	r24, Z
    27ae:	8b 83       	std	Y+3, r24	; 0x03
    27b0:	0f c0       	rjmp	.+30     	; 0x27d0 <KPD_u8GetPressedKey+0x13a>
				/*Polling (busy waiting )until the key is released*/
				while(DIO_u8_PIN_LOW==Local_u8PinSate)
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinSate);
    27b2:	89 81       	ldd	r24, Y+1	; 0x01
    27b4:	88 2f       	mov	r24, r24
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	fc 01       	movw	r30, r24
    27ba:	eb 56       	subi	r30, 0x6B	; 107
    27bc:	ff 4f       	sbci	r31, 0xFF	; 255
    27be:	90 81       	ld	r25, Z
    27c0:	9e 01       	movw	r18, r28
    27c2:	2c 5f       	subi	r18, 0xFC	; 252
    27c4:	3f 4f       	sbci	r19, 0xFF	; 255
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	69 2f       	mov	r22, r25
    27ca:	a9 01       	movw	r20, r18
    27cc:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <DIO_u8GetPinValue>
			/*Check if switch is Pressed*/
			if(DIO_u8_PIN_LOW==Local_u8PinSate)
			{
				Local_u8PressedKey=Local_u8KPDArr[Local_u8RowIndex][Local_u8ColumnIndex];
				/*Polling (busy waiting )until the key is released*/
				while(DIO_u8_PIN_LOW==Local_u8PinSate)
    27d0:	8c 81       	ldd	r24, Y+4	; 0x04
    27d2:	88 23       	and	r24, r24
    27d4:	71 f3       	breq	.-36     	; 0x27b2 <KPD_u8GetPressedKey+0x11c>
				{
					DIO_u8GetPinValue(KPD_PORT,Local_u8KPDRowArr[Local_u8RowIndex],&Local_u8PinSate);
				}
				return  Local_u8PressedKey;
    27d6:	8b 81       	ldd	r24, Y+3	; 0x03
    27d8:	8d 83       	std	Y+5, r24	; 0x05
    27da:	1c c0       	rjmp	.+56     	; 0x2814 <KPD_u8GetPressedKey+0x17e>
	{
		/*Activate Current Column*/

		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_LOW);

		for(Local_u8RowIndex=0;Local_u8RowIndex<ROW_NUM;Local_u8RowIndex++)
    27dc:	89 81       	ldd	r24, Y+1	; 0x01
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	89 83       	std	Y+1, r24	; 0x01
    27e2:	89 81       	ldd	r24, Y+1	; 0x01
    27e4:	84 30       	cpi	r24, 0x04	; 4
    27e6:	08 f4       	brcc	.+2      	; 0x27ea <KPD_u8GetPressedKey+0x154>
    27e8:	bf cf       	rjmp	.-130    	; 0x2768 <KPD_u8GetPressedKey+0xd2>
				}
				return  Local_u8PressedKey;
			}
		}
		/*DeActivate the Current Column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_HIGH);
    27ea:	8a 81       	ldd	r24, Y+2	; 0x02
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	fc 01       	movw	r30, r24
    27f2:	e7 56       	subi	r30, 0x67	; 103
    27f4:	ff 4f       	sbci	r31, 0xFF	; 255
    27f6:	90 81       	ld	r25, Z
    27f8:	81 e0       	ldi	r24, 0x01	; 1
    27fa:	69 2f       	mov	r22, r25
    27fc:	41 e0       	ldi	r20, 0x01	; 1
    27fe:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <DIO_u8SetPinValue>

	static u8 Local_u8KPDColArr[COLUMN_NUM]={KPD_COL0_PIN,KPD_COL1_PIN,KPD_COL2_PIN,KPD_COL3_PIN};

	static u8 Local_u8KPDRowArr[ROW_NUM]={KPD_ROW0_PIN,KPD_ROW1_PIN,KPD_ROW2_PIN,KPD_ROW3_PIN};

	for(Local_u8ColumnIndex=0;Local_u8ColumnIndex<COLUMN_NUM;Local_u8ColumnIndex++)
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	8f 5f       	subi	r24, 0xFF	; 255
    2806:	8a 83       	std	Y+2, r24	; 0x02
    2808:	8a 81       	ldd	r24, Y+2	; 0x02
    280a:	84 30       	cpi	r24, 0x04	; 4
    280c:	08 f4       	brcc	.+2      	; 0x2810 <KPD_u8GetPressedKey+0x17a>
    280e:	9e cf       	rjmp	.-196    	; 0x274c <KPD_u8GetPressedKey+0xb6>
		}
		/*DeActivate the Current Column*/
		DIO_u8SetPinValue(KPD_PORT,Local_u8KPDColArr[Local_u8ColumnIndex],DIO_u8_PIN_HIGH);
	}

	return Local_u8PressedKey;
    2810:	8b 81       	ldd	r24, Y+3	; 0x03
    2812:	8d 83       	std	Y+5, r24	; 0x05
    2814:	8d 81       	ldd	r24, Y+5	; 0x05

}
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	cf 91       	pop	r28
    2822:	df 91       	pop	r29
    2824:	08 95       	ret

00002826 <main>:

void APP(void);
volatile static s8 num_of_miniute;
volatile static s8 num_of_second;
void main (void)
{
    2826:	df 93       	push	r29
    2828:	cf 93       	push	r28
    282a:	cd b7       	in	r28, 0x3d	; 61
    282c:	de b7       	in	r29, 0x3e	; 62
    282e:	6e 97       	sbiw	r28, 0x1e	; 30
    2830:	0f b6       	in	r0, 0x3f	; 63
    2832:	f8 94       	cli
    2834:	de bf       	out	0x3e, r29	; 62
    2836:	0f be       	out	0x3f, r0	; 63
    2838:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Key=KPD_NO_PRESSED_KEY;
    283a:	8f ef       	ldi	r24, 0xFF	; 255
    283c:	8e 8f       	std	Y+30, r24	; 0x1e
	u8 	previous_key=0 ;
    283e:	1d 8e       	std	Y+29, r1	; 0x1d
	HLCD_VoidInit();
    2840:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <HLCD_VoidInit>

	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_PIN_OUTPUT);
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	60 e0       	ldi	r22, 0x00	; 0
    2848:	41 e0       	ldi	r20, 0x01	; 1
    284a:	0e 94 03 0b 	call	0x1606	; 0x1606 <DIO_u8SetPinDirection>
	HLCD_VoidGotoXY(0,0);
    284e:	80 e0       	ldi	r24, 0x00	; 0
    2850:	60 e0       	ldi	r22, 0x00	; 0
    2852:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HLCD_VoidGotoXY>
	HLCD_VoidSendString((u8*)"Enetr Minutes");
    2856:	80 e6       	ldi	r24, 0x60	; 96
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	0e 94 69 12 	call	0x24d2	; 0x24d2 <HLCD_VoidSendString>
	HLCD_VoidGotoXY(1,0);
    285e:	81 e0       	ldi	r24, 0x01	; 1
    2860:	60 e0       	ldi	r22, 0x00	; 0
    2862:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HLCD_VoidGotoXY>
    2866:	1f c0       	rjmp	.+62     	; 0x28a6 <main+0x80>
	while(Local_u8Key != '=')
	{
		do
		{
			if(Local_u8Key!= KPD_NO_PRESSED_KEY )
    2868:	8e 8d       	ldd	r24, Y+30	; 0x1e
    286a:	8f 3f       	cpi	r24, 0xFF	; 255
    286c:	b1 f0       	breq	.+44     	; 0x289a <main+0x74>
			{
				HLCD_VoidSendNumber(Local_u8Key);
    286e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	0e 94 92 12 	call	0x2524	; 0x2524 <HLCD_VoidSendNumber>
				previous_key =previous_key*10+Local_u8Key;
    2878:	8d 8d       	ldd	r24, Y+29	; 0x1d
    287a:	88 2f       	mov	r24, r24
    287c:	90 e0       	ldi	r25, 0x00	; 0
    287e:	9c 01       	movw	r18, r24
    2880:	22 0f       	add	r18, r18
    2882:	33 1f       	adc	r19, r19
    2884:	c9 01       	movw	r24, r18
    2886:	88 0f       	add	r24, r24
    2888:	99 1f       	adc	r25, r25
    288a:	88 0f       	add	r24, r24
    288c:	99 1f       	adc	r25, r25
    288e:	82 0f       	add	r24, r18
    2890:	93 1f       	adc	r25, r19
    2892:	98 2f       	mov	r25, r24
    2894:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2896:	89 0f       	add	r24, r25
    2898:	8d 8f       	std	Y+29, r24	; 0x1d
			}
			Local_u8Key=KPD_u8GetPressedKey();
    289a:	0e 94 4b 13 	call	0x2696	; 0x2696 <KPD_u8GetPressedKey>
    289e:	8e 8f       	std	Y+30, r24	; 0x1e
		}while(Local_u8Key==KPD_NO_PRESSED_KEY );
    28a0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28a2:	8f 3f       	cpi	r24, 0xFF	; 255
    28a4:	09 f3       	breq	.-62     	; 0x2868 <main+0x42>

	DIO_u8SetPinDirection(DIO_u8_PORTA,DIO_u8_PIN0,DIO_u8_PIN_OUTPUT);
	HLCD_VoidGotoXY(0,0);
	HLCD_VoidSendString((u8*)"Enetr Minutes");
	HLCD_VoidGotoXY(1,0);
	while(Local_u8Key != '=')
    28a6:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28a8:	8d 33       	cpi	r24, 0x3D	; 61
    28aa:	f1 f6       	brne	.-68     	; 0x2868 <main+0x42>
				previous_key =previous_key*10+Local_u8Key;
			}
			Local_u8Key=KPD_u8GetPressedKey();
		}while(Local_u8Key==KPD_NO_PRESSED_KEY );
	}
	num_of_miniute = previous_key ;
    28ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    28ae:	80 93 bc 00 	sts	0x00BC, r24
	previous_key =0;
    28b2:	1d 8e       	std	Y+29, r1	; 0x1d
    28b4:	80 e0       	ldi	r24, 0x00	; 0
    28b6:	90 e0       	ldi	r25, 0x00	; 0
    28b8:	aa ef       	ldi	r26, 0xFA	; 250
    28ba:	b3 e4       	ldi	r27, 0x43	; 67
    28bc:	89 8f       	std	Y+25, r24	; 0x19
    28be:	9a 8f       	std	Y+26, r25	; 0x1a
    28c0:	ab 8f       	std	Y+27, r26	; 0x1b
    28c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28c4:	69 8d       	ldd	r22, Y+25	; 0x19
    28c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28cc:	20 e0       	ldi	r18, 0x00	; 0
    28ce:	30 e0       	ldi	r19, 0x00	; 0
    28d0:	4a ef       	ldi	r20, 0xFA	; 250
    28d2:	54 e4       	ldi	r21, 0x44	; 68
    28d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	8d 8b       	std	Y+21, r24	; 0x15
    28de:	9e 8b       	std	Y+22, r25	; 0x16
    28e0:	af 8b       	std	Y+23, r26	; 0x17
    28e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28e4:	6d 89       	ldd	r22, Y+21	; 0x15
    28e6:	7e 89       	ldd	r23, Y+22	; 0x16
    28e8:	8f 89       	ldd	r24, Y+23	; 0x17
    28ea:	98 8d       	ldd	r25, Y+24	; 0x18
    28ec:	20 e0       	ldi	r18, 0x00	; 0
    28ee:	30 e0       	ldi	r19, 0x00	; 0
    28f0:	40 e8       	ldi	r20, 0x80	; 128
    28f2:	5f e3       	ldi	r21, 0x3F	; 63
    28f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28f8:	88 23       	and	r24, r24
    28fa:	2c f4       	brge	.+10     	; 0x2906 <main+0xe0>
		__ticks = 1;
    28fc:	81 e0       	ldi	r24, 0x01	; 1
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	9c 8b       	std	Y+20, r25	; 0x14
    2902:	8b 8b       	std	Y+19, r24	; 0x13
    2904:	3f c0       	rjmp	.+126    	; 0x2984 <main+0x15e>
	else if (__tmp > 65535)
    2906:	6d 89       	ldd	r22, Y+21	; 0x15
    2908:	7e 89       	ldd	r23, Y+22	; 0x16
    290a:	8f 89       	ldd	r24, Y+23	; 0x17
    290c:	98 8d       	ldd	r25, Y+24	; 0x18
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	3f ef       	ldi	r19, 0xFF	; 255
    2912:	4f e7       	ldi	r20, 0x7F	; 127
    2914:	57 e4       	ldi	r21, 0x47	; 71
    2916:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    291a:	18 16       	cp	r1, r24
    291c:	4c f5       	brge	.+82     	; 0x2970 <main+0x14a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    291e:	69 8d       	ldd	r22, Y+25	; 0x19
    2920:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2922:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2924:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e2       	ldi	r20, 0x20	; 32
    292c:	51 e4       	ldi	r21, 0x41	; 65
    292e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	bc 01       	movw	r22, r24
    2938:	cd 01       	movw	r24, r26
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9c 8b       	std	Y+20, r25	; 0x14
    2944:	8b 8b       	std	Y+19, r24	; 0x13
    2946:	0f c0       	rjmp	.+30     	; 0x2966 <main+0x140>
    2948:	88 ec       	ldi	r24, 0xC8	; 200
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	9a 8b       	std	Y+18, r25	; 0x12
    294e:	89 8b       	std	Y+17, r24	; 0x11
    2950:	89 89       	ldd	r24, Y+17	; 0x11
    2952:	9a 89       	ldd	r25, Y+18	; 0x12
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <main+0x12e>
    2958:	9a 8b       	std	Y+18, r25	; 0x12
    295a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    295c:	8b 89       	ldd	r24, Y+19	; 0x13
    295e:	9c 89       	ldd	r25, Y+20	; 0x14
    2960:	01 97       	sbiw	r24, 0x01	; 1
    2962:	9c 8b       	std	Y+20, r25	; 0x14
    2964:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2966:	8b 89       	ldd	r24, Y+19	; 0x13
    2968:	9c 89       	ldd	r25, Y+20	; 0x14
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	69 f7       	brne	.-38     	; 0x2948 <main+0x122>
    296e:	14 c0       	rjmp	.+40     	; 0x2998 <main+0x172>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2970:	6d 89       	ldd	r22, Y+21	; 0x15
    2972:	7e 89       	ldd	r23, Y+22	; 0x16
    2974:	8f 89       	ldd	r24, Y+23	; 0x17
    2976:	98 8d       	ldd	r25, Y+24	; 0x18
    2978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	9c 8b       	std	Y+20, r25	; 0x14
    2982:	8b 8b       	std	Y+19, r24	; 0x13
    2984:	8b 89       	ldd	r24, Y+19	; 0x13
    2986:	9c 89       	ldd	r25, Y+20	; 0x14
    2988:	98 8b       	std	Y+16, r25	; 0x10
    298a:	8f 87       	std	Y+15, r24	; 0x0f
    298c:	8f 85       	ldd	r24, Y+15	; 0x0f
    298e:	98 89       	ldd	r25, Y+16	; 0x10
    2990:	01 97       	sbiw	r24, 0x01	; 1
    2992:	f1 f7       	brne	.-4      	; 0x2990 <main+0x16a>
    2994:	98 8b       	std	Y+16, r25	; 0x10
    2996:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(500);
	HLCD_VoidSendCommand(DISPLAYCLEAR);
    2998:	81 e0       	ldi	r24, 0x01	; 1
    299a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <HLCD_VoidSendCommand>
	Local_u8Key= KPD_NO_PRESSED_KEY ;
    299e:	8f ef       	ldi	r24, 0xFF	; 255
    29a0:	8e 8f       	std	Y+30, r24	; 0x1e
	HLCD_VoidSendString((u8*)"Enter Seconds");
    29a2:	8e e6       	ldi	r24, 0x6E	; 110
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	0e 94 69 12 	call	0x24d2	; 0x24d2 <HLCD_VoidSendString>
	HLCD_VoidGotoXY(1,0);
    29aa:	81 e0       	ldi	r24, 0x01	; 1
    29ac:	60 e0       	ldi	r22, 0x00	; 0
    29ae:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HLCD_VoidGotoXY>
    29b2:	1f c0       	rjmp	.+62     	; 0x29f2 <main+0x1cc>
	while(Local_u8Key != '=')
	{
		do
		{
			if(Local_u8Key!= KPD_NO_PRESSED_KEY)
    29b4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29b6:	8f 3f       	cpi	r24, 0xFF	; 255
    29b8:	b1 f0       	breq	.+44     	; 0x29e6 <main+0x1c0>
			{
				HLCD_VoidSendNumber(Local_u8Key);
    29ba:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29bc:	88 2f       	mov	r24, r24
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	0e 94 92 12 	call	0x2524	; 0x2524 <HLCD_VoidSendNumber>
				previous_key =previous_key*10+Local_u8Key;
    29c4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29c6:	88 2f       	mov	r24, r24
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9c 01       	movw	r18, r24
    29cc:	22 0f       	add	r18, r18
    29ce:	33 1f       	adc	r19, r19
    29d0:	c9 01       	movw	r24, r18
    29d2:	88 0f       	add	r24, r24
    29d4:	99 1f       	adc	r25, r25
    29d6:	88 0f       	add	r24, r24
    29d8:	99 1f       	adc	r25, r25
    29da:	82 0f       	add	r24, r18
    29dc:	93 1f       	adc	r25, r19
    29de:	98 2f       	mov	r25, r24
    29e0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29e2:	89 0f       	add	r24, r25
    29e4:	8d 8f       	std	Y+29, r24	; 0x1d

			}
			Local_u8Key=KPD_u8GetPressedKey();
    29e6:	0e 94 4b 13 	call	0x2696	; 0x2696 <KPD_u8GetPressedKey>
    29ea:	8e 8f       	std	Y+30, r24	; 0x1e
		}while(Local_u8Key==KPD_NO_PRESSED_KEY );
    29ec:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29ee:	8f 3f       	cpi	r24, 0xFF	; 255
    29f0:	09 f3       	breq	.-62     	; 0x29b4 <main+0x18e>
	_delay_ms(500);
	HLCD_VoidSendCommand(DISPLAYCLEAR);
	Local_u8Key= KPD_NO_PRESSED_KEY ;
	HLCD_VoidSendString((u8*)"Enter Seconds");
	HLCD_VoidGotoXY(1,0);
	while(Local_u8Key != '=')
    29f2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    29f4:	8d 33       	cpi	r24, 0x3D	; 61
    29f6:	f1 f6       	brne	.-68     	; 0x29b4 <main+0x18e>

			}
			Local_u8Key=KPD_u8GetPressedKey();
		}while(Local_u8Key==KPD_NO_PRESSED_KEY );
	}
	num_of_second = previous_key;
    29f8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29fa:	80 93 bd 00 	sts	0x00BD, r24
    29fe:	80 e0       	ldi	r24, 0x00	; 0
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	aa ef       	ldi	r26, 0xFA	; 250
    2a04:	b3 e4       	ldi	r27, 0x43	; 67
    2a06:	8b 87       	std	Y+11, r24	; 0x0b
    2a08:	9c 87       	std	Y+12, r25	; 0x0c
    2a0a:	ad 87       	std	Y+13, r26	; 0x0d
    2a0c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a0e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a10:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a12:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a14:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	4a ef       	ldi	r20, 0xFA	; 250
    2a1c:	54 e4       	ldi	r21, 0x44	; 68
    2a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a22:	dc 01       	movw	r26, r24
    2a24:	cb 01       	movw	r24, r22
    2a26:	8f 83       	std	Y+7, r24	; 0x07
    2a28:	98 87       	std	Y+8, r25	; 0x08
    2a2a:	a9 87       	std	Y+9, r26	; 0x09
    2a2c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a2e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a30:	78 85       	ldd	r23, Y+8	; 0x08
    2a32:	89 85       	ldd	r24, Y+9	; 0x09
    2a34:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a42:	88 23       	and	r24, r24
    2a44:	2c f4       	brge	.+10     	; 0x2a50 <main+0x22a>
		__ticks = 1;
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	9e 83       	std	Y+6, r25	; 0x06
    2a4c:	8d 83       	std	Y+5, r24	; 0x05
    2a4e:	3f c0       	rjmp	.+126    	; 0x2ace <main+0x2a8>
	else if (__tmp > 65535)
    2a50:	6f 81       	ldd	r22, Y+7	; 0x07
    2a52:	78 85       	ldd	r23, Y+8	; 0x08
    2a54:	89 85       	ldd	r24, Y+9	; 0x09
    2a56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	3f ef       	ldi	r19, 0xFF	; 255
    2a5c:	4f e7       	ldi	r20, 0x7F	; 127
    2a5e:	57 e4       	ldi	r21, 0x47	; 71
    2a60:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a64:	18 16       	cp	r1, r24
    2a66:	4c f5       	brge	.+82     	; 0x2aba <main+0x294>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a68:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a6a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a70:	20 e0       	ldi	r18, 0x00	; 0
    2a72:	30 e0       	ldi	r19, 0x00	; 0
    2a74:	40 e2       	ldi	r20, 0x20	; 32
    2a76:	51 e4       	ldi	r21, 0x41	; 65
    2a78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	bc 01       	movw	r22, r24
    2a82:	cd 01       	movw	r24, r26
    2a84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a88:	dc 01       	movw	r26, r24
    2a8a:	cb 01       	movw	r24, r22
    2a8c:	9e 83       	std	Y+6, r25	; 0x06
    2a8e:	8d 83       	std	Y+5, r24	; 0x05
    2a90:	0f c0       	rjmp	.+30     	; 0x2ab0 <main+0x28a>
    2a92:	88 ec       	ldi	r24, 0xC8	; 200
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	9c 83       	std	Y+4, r25	; 0x04
    2a98:	8b 83       	std	Y+3, r24	; 0x03
    2a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a9e:	01 97       	sbiw	r24, 0x01	; 1
    2aa0:	f1 f7       	brne	.-4      	; 0x2a9e <main+0x278>
    2aa2:	9c 83       	std	Y+4, r25	; 0x04
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    2aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    2aaa:	01 97       	sbiw	r24, 0x01	; 1
    2aac:	9e 83       	std	Y+6, r25	; 0x06
    2aae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ab0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab4:	00 97       	sbiw	r24, 0x00	; 0
    2ab6:	69 f7       	brne	.-38     	; 0x2a92 <main+0x26c>
    2ab8:	14 c0       	rjmp	.+40     	; 0x2ae2 <main+0x2bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aba:	6f 81       	ldd	r22, Y+7	; 0x07
    2abc:	78 85       	ldd	r23, Y+8	; 0x08
    2abe:	89 85       	ldd	r24, Y+9	; 0x09
    2ac0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ac2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	9e 83       	std	Y+6, r25	; 0x06
    2acc:	8d 83       	std	Y+5, r24	; 0x05
    2ace:	8d 81       	ldd	r24, Y+5	; 0x05
    2ad0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ad2:	9a 83       	std	Y+2, r25	; 0x02
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	89 81       	ldd	r24, Y+1	; 0x01
    2ad8:	9a 81       	ldd	r25, Y+2	; 0x02
    2ada:	01 97       	sbiw	r24, 0x01	; 1
    2adc:	f1 f7       	brne	.-4      	; 0x2ada <main+0x2b4>
    2ade:	9a 83       	std	Y+2, r25	; 0x02
    2ae0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500);
	HLCD_VoidSendCommand(DISPLAYCLEAR);
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <HLCD_VoidSendCommand>

	HLCD_VoidSendString("Minutes  Seconds");
    2ae8:	8c e7       	ldi	r24, 0x7C	; 124
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 69 12 	call	0x24d2	; 0x24d2 <HLCD_VoidSendString>
	HLCD_VoidGotoXY(1,1);
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	61 e0       	ldi	r22, 0x01	; 1
    2af4:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HLCD_VoidGotoXY>
	HLCD_VoidSendNumber(num_of_miniute);
    2af8:	80 91 bc 00 	lds	r24, 0x00BC
    2afc:	99 27       	eor	r25, r25
    2afe:	87 fd       	sbrc	r24, 7
    2b00:	90 95       	com	r25
    2b02:	0e 94 92 12 	call	0x2524	; 0x2524 <HLCD_VoidSendNumber>
	HLCD_VoidGotoXY(1,11);
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	6b e0       	ldi	r22, 0x0B	; 11
    2b0a:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HLCD_VoidGotoXY>
	HLCD_VoidSendNumber(num_of_second);
    2b0e:	80 91 bd 00 	lds	r24, 0x00BD
    2b12:	99 27       	eor	r25, r25
    2b14:	87 fd       	sbrc	r24, 7
    2b16:	90 95       	com	r25
    2b18:	0e 94 92 12 	call	0x2524	; 0x2524 <HLCD_VoidSendNumber>


	TIMER0_CTC_SetOCR0(250);
    2b1c:	8a ef       	ldi	r24, 0xFA	; 250
    2b1e:	0e 94 d2 06 	call	0xda4	; 0xda4 <TIMER0_CTC_SetOCR0>
	TIMER0_Init(TIMER0_CTC_MODE, TIMER0_SCALER_8);
    2b22:	82 e0       	ldi	r24, 0x02	; 2
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	0e 94 a3 05 	call	0xb46	; 0xb46 <TIMER0_Init>
	TIMER0_OC_InterruptEnable();
    2b2a:	0e 94 ac 06 	call	0xd58	; 0xd58 <TIMER0_OC_InterruptEnable>
	Timer0_CTC_SetCallBack(&APP);
    2b2e:	8e e9       	ldi	r24, 0x9E	; 158
    2b30:	95 e1       	ldi	r25, 0x15	; 21
    2b32:	0e 94 f6 06 	call	0xdec	; 0xdec <Timer0_CTC_SetCallBack>
	GIE_voidEnable();
    2b36:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <GIE_voidEnable>
    2b3a:	ff cf       	rjmp	.-2      	; 0x2b3a <main+0x314>

00002b3c <APP>:

	}
}

void APP (void)
{
    2b3c:	df 93       	push	r29
    2b3e:	cf 93       	push	r28
    2b40:	cd b7       	in	r28, 0x3d	; 61
    2b42:	de b7       	in	r29, 0x3e	; 62
	volatile static u16 counter = 0;
	counter++ ;
    2b44:	80 91 ba 00 	lds	r24, 0x00BA
    2b48:	90 91 bb 00 	lds	r25, 0x00BB
    2b4c:	01 96       	adiw	r24, 0x01	; 1
    2b4e:	90 93 bb 00 	sts	0x00BB, r25
    2b52:	80 93 ba 00 	sts	0x00BA, r24
	if(counter == 4000)
    2b56:	80 91 ba 00 	lds	r24, 0x00BA
    2b5a:	90 91 bb 00 	lds	r25, 0x00BB
    2b5e:	2f e0       	ldi	r18, 0x0F	; 15
    2b60:	80 3a       	cpi	r24, 0xA0	; 160
    2b62:	92 07       	cpc	r25, r18
    2b64:	09 f0       	breq	.+2      	; 0x2b68 <APP+0x2c>
    2b66:	54 c0       	rjmp	.+168    	; 0x2c10 <APP+0xd4>
	{
		if(num_of_miniute !=0 || num_of_second !=0)
    2b68:	80 91 bc 00 	lds	r24, 0x00BC
    2b6c:	88 23       	and	r24, r24
    2b6e:	29 f4       	brne	.+10     	; 0x2b7a <APP+0x3e>
    2b70:	80 91 bd 00 	lds	r24, 0x00BD
    2b74:	88 23       	and	r24, r24
    2b76:	09 f4       	brne	.+2      	; 0x2b7a <APP+0x3e>
    2b78:	47 c0       	rjmp	.+142    	; 0x2c08 <APP+0xcc>
		{
			if(num_of_miniute < 9)
    2b7a:	80 91 bc 00 	lds	r24, 0x00BC
    2b7e:	89 30       	cpi	r24, 0x09	; 9
    2b80:	44 f4       	brge	.+16     	; 0x2b92 <APP+0x56>
			{
				HLCD_VoidGotoXY(1,0);
    2b82:	81 e0       	ldi	r24, 0x01	; 1
    2b84:	60 e0       	ldi	r22, 0x00	; 0
    2b86:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HLCD_VoidGotoXY>
				HLCD_VoidSendNumber(0);
    2b8a:	80 e0       	ldi	r24, 0x00	; 0
    2b8c:	90 e0       	ldi	r25, 0x00	; 0
    2b8e:	0e 94 92 12 	call	0x2524	; 0x2524 <HLCD_VoidSendNumber>
			}
			HLCD_VoidGotoXY(1,11);
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	6b e0       	ldi	r22, 0x0B	; 11
    2b96:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HLCD_VoidGotoXY>

			if(num_of_second <= 10 )
    2b9a:	80 91 bd 00 	lds	r24, 0x00BD
    2b9e:	8b 30       	cpi	r24, 0x0B	; 11
    2ba0:	24 f4       	brge	.+8      	; 0x2baa <APP+0x6e>
			{
				HLCD_VoidSendNumber(0);
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	90 e0       	ldi	r25, 0x00	; 0
    2ba6:	0e 94 92 12 	call	0x2524	; 0x2524 <HLCD_VoidSendNumber>
			}
			num_of_second--;
    2baa:	80 91 bd 00 	lds	r24, 0x00BD
    2bae:	81 50       	subi	r24, 0x01	; 1
    2bb0:	80 93 bd 00 	sts	0x00BD, r24
			HLCD_VoidSendNumber(num_of_second);
    2bb4:	80 91 bd 00 	lds	r24, 0x00BD
    2bb8:	99 27       	eor	r25, r25
    2bba:	87 fd       	sbrc	r24, 7
    2bbc:	90 95       	com	r25
    2bbe:	0e 94 92 12 	call	0x2524	; 0x2524 <HLCD_VoidSendNumber>

			if(num_of_miniute >0 && num_of_second ==0)
    2bc2:	80 91 bc 00 	lds	r24, 0x00BC
    2bc6:	18 16       	cp	r1, r24
    2bc8:	fc f4       	brge	.+62     	; 0x2c08 <APP+0xcc>
    2bca:	80 91 bd 00 	lds	r24, 0x00BD
    2bce:	88 23       	and	r24, r24
    2bd0:	d9 f4       	brne	.+54     	; 0x2c08 <APP+0xcc>
			{
				HLCD_VoidGotoXY(1,1);
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	61 e0       	ldi	r22, 0x01	; 1
    2bd6:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HLCD_VoidGotoXY>
				num_of_miniute--;
    2bda:	80 91 bc 00 	lds	r24, 0x00BC
    2bde:	81 50       	subi	r24, 0x01	; 1
    2be0:	80 93 bc 00 	sts	0x00BC, r24
				HLCD_VoidSendNumber(num_of_miniute);
    2be4:	80 91 bc 00 	lds	r24, 0x00BC
    2be8:	99 27       	eor	r25, r25
    2bea:	87 fd       	sbrc	r24, 7
    2bec:	90 95       	com	r25
    2bee:	0e 94 92 12 	call	0x2524	; 0x2524 <HLCD_VoidSendNumber>
				HLCD_VoidGotoXY(1,11);
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	6b e0       	ldi	r22, 0x0B	; 11
    2bf6:	0e 94 f1 12 	call	0x25e2	; 0x25e2 <HLCD_VoidGotoXY>
				HLCD_VoidSendNumber(59);
    2bfa:	8b e3       	ldi	r24, 0x3B	; 59
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	0e 94 92 12 	call	0x2524	; 0x2524 <HLCD_VoidSendNumber>
				num_of_second = 59;
    2c02:	8b e3       	ldi	r24, 0x3B	; 59
    2c04:	80 93 bd 00 	sts	0x00BD, r24
			}
		}
		counter =0;
    2c08:	10 92 bb 00 	sts	0x00BB, r1
    2c0c:	10 92 ba 00 	sts	0x00BA, r1


	}


}
    2c10:	cf 91       	pop	r28
    2c12:	df 91       	pop	r29
    2c14:	08 95       	ret

00002c16 <__udivmodhi4>:
    2c16:	aa 1b       	sub	r26, r26
    2c18:	bb 1b       	sub	r27, r27
    2c1a:	51 e1       	ldi	r21, 0x11	; 17
    2c1c:	07 c0       	rjmp	.+14     	; 0x2c2c <__udivmodhi4_ep>

00002c1e <__udivmodhi4_loop>:
    2c1e:	aa 1f       	adc	r26, r26
    2c20:	bb 1f       	adc	r27, r27
    2c22:	a6 17       	cp	r26, r22
    2c24:	b7 07       	cpc	r27, r23
    2c26:	10 f0       	brcs	.+4      	; 0x2c2c <__udivmodhi4_ep>
    2c28:	a6 1b       	sub	r26, r22
    2c2a:	b7 0b       	sbc	r27, r23

00002c2c <__udivmodhi4_ep>:
    2c2c:	88 1f       	adc	r24, r24
    2c2e:	99 1f       	adc	r25, r25
    2c30:	5a 95       	dec	r21
    2c32:	a9 f7       	brne	.-22     	; 0x2c1e <__udivmodhi4_loop>
    2c34:	80 95       	com	r24
    2c36:	90 95       	com	r25
    2c38:	bc 01       	movw	r22, r24
    2c3a:	cd 01       	movw	r24, r26
    2c3c:	08 95       	ret

00002c3e <__prologue_saves__>:
    2c3e:	2f 92       	push	r2
    2c40:	3f 92       	push	r3
    2c42:	4f 92       	push	r4
    2c44:	5f 92       	push	r5
    2c46:	6f 92       	push	r6
    2c48:	7f 92       	push	r7
    2c4a:	8f 92       	push	r8
    2c4c:	9f 92       	push	r9
    2c4e:	af 92       	push	r10
    2c50:	bf 92       	push	r11
    2c52:	cf 92       	push	r12
    2c54:	df 92       	push	r13
    2c56:	ef 92       	push	r14
    2c58:	ff 92       	push	r15
    2c5a:	0f 93       	push	r16
    2c5c:	1f 93       	push	r17
    2c5e:	cf 93       	push	r28
    2c60:	df 93       	push	r29
    2c62:	cd b7       	in	r28, 0x3d	; 61
    2c64:	de b7       	in	r29, 0x3e	; 62
    2c66:	ca 1b       	sub	r28, r26
    2c68:	db 0b       	sbc	r29, r27
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	de bf       	out	0x3e, r29	; 62
    2c70:	0f be       	out	0x3f, r0	; 63
    2c72:	cd bf       	out	0x3d, r28	; 61
    2c74:	09 94       	ijmp

00002c76 <__epilogue_restores__>:
    2c76:	2a 88       	ldd	r2, Y+18	; 0x12
    2c78:	39 88       	ldd	r3, Y+17	; 0x11
    2c7a:	48 88       	ldd	r4, Y+16	; 0x10
    2c7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c80:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c82:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c84:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c86:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c88:	b9 84       	ldd	r11, Y+9	; 0x09
    2c8a:	c8 84       	ldd	r12, Y+8	; 0x08
    2c8c:	df 80       	ldd	r13, Y+7	; 0x07
    2c8e:	ee 80       	ldd	r14, Y+6	; 0x06
    2c90:	fd 80       	ldd	r15, Y+5	; 0x05
    2c92:	0c 81       	ldd	r16, Y+4	; 0x04
    2c94:	1b 81       	ldd	r17, Y+3	; 0x03
    2c96:	aa 81       	ldd	r26, Y+2	; 0x02
    2c98:	b9 81       	ldd	r27, Y+1	; 0x01
    2c9a:	ce 0f       	add	r28, r30
    2c9c:	d1 1d       	adc	r29, r1
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	de bf       	out	0x3e, r29	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	cd bf       	out	0x3d, r28	; 61
    2ca8:	ed 01       	movw	r28, r26
    2caa:	08 95       	ret

00002cac <_exit>:
    2cac:	f8 94       	cli

00002cae <__stop_program>:
    2cae:	ff cf       	rjmp	.-2      	; 0x2cae <__stop_program>
